// reusable components for Vue.js

'use strict';

!function() {

  var $ = function(e) {
    return {
      on: function(t, l) { e.addEventListener(t, l); return this; },
      off: function(t, l) { e.removeEventListener(t, l); return this; }
    };
  };

  var ColorUtil = function() {
    // https://en.wikipedia.org/wiki/HSL_and_HSV
    var HEX = '0123456789abcdef';
    var hex3Re = /^#[0-9a-f]{3}$/;
    var hex6Re = /^#[0-9a-f]{6}$/;
    var val2hex = function(v) {
      return HEX.charAt( (v >> 4) & 0x0f) + HEX.charAt(v & 0x0f);
    };
    var rgb2hex = function(r, g, b) {
      return '#' + val2hex(r) + val2hex(g) + val2hex(b);
    };
    var hex2val = function(hex, h, l) {
      return HEX.indexOf(hex.charAt(h) ) << 4 |
        HEX.indexOf(hex.charAt(l) );
    };
    var hex2rgb = function(hex) {
      if (typeof hex == 'string') {
        hex = hex.toLowerCase();
        if (hex.match(hex3Re) ) {
          return [ hex2val(hex, 1, 1), hex2val(hex, 2, 2), hex2val(hex, 3, 3) ];
        } else if (hex.match(hex6Re) ) {
          return [ hex2val(hex, 1, 2), hex2val(hex, 3, 4), hex2val(hex, 5, 6) ];
        }
      }
      return [0, 0, 0];
    }
    var rad2hueCoords = [
      [0, 0],
      [0.453, 15],
      [0.895, 30],
      [1.472, 45],
      [2.080, 60],
      [2.493, 90],
      [2.912, 120],
      [3.295, 150],
      [3.644, 180],
      [3.995, 210],
      [4.485, 240],
      [5.115, 270],
      [5.531, 300],
      [5.899, 330],
      [Math.PI * 2, 360]
    ];
 
    var coordsFunc = function(coords, src, dst) {
      var lastCoords = coords[coords.length - 1];
      return function(value) {
        value = value % lastCoords[src];
        if (value < 0) {
          value += lastCoords[src];
        }
        for (var i = 1; i < coords.length; i += 1) {
          var c1 = coords[i - 1];
          var c2 = coords[i];
          if (c1[src] <= value && value < c2[src]) {
            return (value - c1[src]) / (c2[src] - c1[src]) *
              (c2[dst] - c1[dst]) + c1[dst];
          }
        }
        return 0;
      };
    };
    var rad2hue = coordsFunc(rad2hueCoords, 0, 1);
    var hue2rad = coordsFunc(rad2hueCoords, 1, 0);
    //
    var rgb2cmyk = '#040000,#030411,#03061E,#09112C,#101A39,#162144,#1A274E,#1D2B57,#1D2E5E,#1C2C6F,#172D81,#0B318F,#033994,#183F97,#17449A,#18499D,#061307,#001010,#001021,#0B132F,#131D3C,#182447,#1C2951,#1D2C59,#1D2D65,#1B2C77,#152D86,#053391,#093B95,#194198,#18469B,#1A4A9E,#0B220E,#002111,#002121,#002132,#0E2240,#17274B,#1B2C55,#1C2E60,#1A2F6E,#162E80,#0E308E,#063893,#153E97,#1B439A,#1C489C,#1D4C9F,#0D3219,#013219,#003221,#003232,#003243,#043252,#12335F,#15346C,#10347B,#09348B,#003893,#103E97,#1A449A,#1F489C,#1F4C9F,#1F4FA1,#094324,#024324,#004324,#004332,#004343,#004253,#004263,#004172,#004180,#00418E,#00439A,#13479C,#1B4B9F,#204EA1,#2251A2,#2354A4,#04532D,#02532D,#01532D,#005332,#005442,#005353,#005363,#005273,#005282,#025190,#05509E,#0C53A4,#1A55A5,#2056A6,#2458A7,#255AA8,#0B6334,#096334,#066335,#006335,#006343,#006453,#006363,#006373,#006283,#086291,#03619F,#0B61AD,#1861AE,#2161AE,#2762AE,#2A62AE,#117339,#0F7339,#0F7339,#0A733A,#037342,#027353,#027363,#027373,#097383,#097292,#0E71A1,#0E70AF,#1370B9,#206EB8,#286EB6,#2D6CB5,#16833B,#15833B,#13833B,#0F833B,#0C8342,#0F8353,#0A8363,#088373,#098382,#0B8292,#0F81A1,#0C81B0,#1080BE,#1B7FC4,#297CC1,#327ABF,#1B923B,#1B923B,#19923B,#15923B,#129243,#0C9253,#0F9363,#0C9373,#0A9382,#079292,#1092A1,#1391B0,#1190BF,#168FCD,#248ECF,#348BCC,#20A239,#1FA23A,#1EA13A,#1CA13A,#18A143,#16A153,#18A263,#11A273,#11A282,#12A292,#13A2A1,#14A1B1,#14A0BF,#199FCE,#219FDB,#359DD9,#2FAD38,#2FAD38,#2FAD38,#2EAD3A,#2BAD47,#2AAE55,#29AF63,#23AF72,#21B183,#19B292,#19B1A2,#1BB1B0,#14B0BF,#1DB0CE,#1EB0DE,#31AFE5,#44B035,#44B035,#45B036,#44B13F,#43B14B,#42B256,#40B263,#3EB371,#3EB47F,#3BB58E,#3AB69D,#36B7AB,#34B8BB,#33BACB,#31BBDA,#31BDEB,#52B333,#52B332,#53B335,#53B43F,#53B449,#52B556,#51B561,#51B66F,#51B77C,#50B88A,#50BA99,#4EBBA7,#4EBCB5,#4DBDC3,#50BFD2,#51C1E0,#5FB630,#60B630,#60B632,#60B63B,#60B746,#60B853,#60B860,#60B96D,#60BA7A,#5FBB87,#60BD95,#5FBEA3,#5FBFB1,#61C1BE,#5FC2CC,#64C4D9,#6AB82D,#6AB82D,#6BB82D,#6BB936,#6BBA42,#6CBA4E,#6DBB5C,#6EBD69,#6DBE77,#6DBF84,#6EC092,#6DC19F,#6EC3AD,#6FC4BA,#6EC5C7,#71C7D5,#100205,#110411,#10061F,#0F122D,#141B3A,#182346,#1B284F,#1E2B59,#1E2C61,#1E2A73,#192A83,#0B318F,#113994,#1D3F97,#1C449A,#1C489D,#121306,#101010,#101021,#0E1432,#141E3E,#1A2649,#1C2A53,#1E2C5B,#1E2B67,#1C297B,#162B89,#133391,#163B95,#1E4198,#1D469B,#1F499E,#15230E,#112110,#0F2121,#0F2132,#0F2142,#18254E,#1D2A58,#1E2C64,#1B2D72,#172B83,#0E2F8F,#163893,#1C3E97,#1F439A,#21479C,#204C9F,#173218,#103219,#0E3221,#0E3232,#0E3243,#0E3253,#133261,#16336F,#12337D,#0B328E,#0C3893,#1B3E97,#1F449A,#23489C,#224C9F,#234FA1,#154323,#114323,#0E4324,#0E4332,#0E4343,#0F4353,#0D4263,#0F4272,#0F4181,#10418F,#10439A,#1B479C,#204B9E,#244EA0,#2651A2,#2653A4,#14532C,#13532C,#10532D,#0D5432,#0D5343,#0C5353,#0D5363,#105373,#0F5282,#115190,#14509E,#1553A4,#2055A5,#2556A6,#2858A7,#295AA8,#176334,#166334,#146434,#126334,#106343,#116453,#0F6363,#116373,#116283,#166291,#1361A0,#1761AD,#1F61AE,#2661AE,#2A61AE,#2D62AE,#1C7339,#1B7339,#1A7339,#177339,#137342,#147353,#137363,#137373,#177383,#167292,#1971A1,#1870AF,#1B70B9,#256EB7,#2B6DB6,#2F6CB5,#1C833B,#1B833B,#1A833B,#19833B,#168342,#188353,#168363,#158373,#148382,#168392,#1882A1,#1781B0,#1A80BE,#227FC4,#2D7CC1,#357ABF,#22933A,#23923A,#22923A,#1D923B,#199243,#179353,#1A9363,#189373,#169382,#169392,#1992A1,#1C91B0,#1B90BF,#1E8FCD,#2A8ECE,#388CCC,#26A239,#26A239,#25A139,#22A139,#1FA243,#1FA153,#1EA263,#1AA273,#1AA283,#1BA292,#1CA2A2,#1DA1B1,#1DA0BF,#21A0CE,#269FDB,#399DD8,#32AD37,#32AD37,#32AD37,#31AD3A,#2FAE47,#2EAE55,#2CAF63,#28B072,#25B183,#1FB292,#1FB1A2,#21B1B0,#1DB0C0,#22B0CF,#24B0DE,#35AFE5,#46B035,#46B035,#47B136,#46B13F,#45B14B,#44B256,#43B363,#41B371,#40B47F,#3EB58E,#3CB79D,#39B8AC,#37B9BB,#36BACB,#35BCDB,#34BDEB,#54B332,#54B332,#54B336,#54B43F,#54B449,#53B556,#52B661,#53B76F,#53B87C,#52B98A,#52BA99,#50BBA7,#50BCB5,#4FBEC3,#51BFD2,#52C1E0,#61B630,#61B630,#61B632,#61B73B,#61B746,#61B853,#61B960,#61BA6D,#62BB7A,#61BC87,#61BD95,#60BEA3,#60BFB1,#62C1BE,#61C2CC,#65C5DA,#6BB92D,#6BB92D,#6CB92D,#6CB936,#6CBA42,#6DBB4F,#6EBC5C,#6FBD69,#6EBE77,#6EBF85,#6FC092,#6EC19F,#6FC3AD,#70C4BA,#6FC6C8,#72C8D5,#210204,#200211,#1E061F,#1C132E,#1D1C3B,#202446,#222951,#212C5B,#1F2A66,#1F267A,#1A2687,#20318F,#203994,#243F97,#23449A,#23489C,#211305,#211010,#211021,#1F1332,#1E1E3E,#20274A,#212B55,#202C5E,#1F296D,#1E2480,#1B298C,#203391,#253B95,#254098,#25459B,#25499D,#22230D,#212110,#212121,#212132,#212142,#1F2451,#20295D,#1F2A68,#1D2878,#1B2689,#1F2F8F,#243893,#263E96,#274399,#27479C,#264B9F,#233317,#213218,#213221,#213232,#203243,#203253,#1F3162,#1E3171,#1F317F,#1C318F,#1F3893,#263E97,#27439A,#29479C,#284B9F,#294EA1,#244322,#234322,#214322,#224332,#214343,#204353,#204363,#204272,#204181,#20418F,#1F4399,#25479C,#284A9E,#2B4EA0,#2C50A2,#2B53A4,#23542C,#22542C,#22532C,#215332,#215343,#215353,#205364,#205373,#205282,#215190,#22509E,#2253A4,#2855A5,#2C56A5,#2D58A7,#2F59A8,#266433,#256333,#256333,#236333,#226443,#226453,#216363,#216373,#226383,#236292,#23619F,#2561AD,#2961AD,#2D61AD,#2F61AD,#3161AD,#277438,#277338,#267338,#247338,#237342,#237453,#227363,#227373,#237383,#237292,#2671A1,#2571AF,#2670B9,#2D6FB7,#316DB6,#346CB5,#27833A,#27833A,#26833A,#25833A,#238343,#238353,#228363,#238373,#228383,#258393,#2582A2,#2481B0,#2680BE,#2B7FC3,#337CC1,#397ABF,#2C933A,#2D933A,#2B923A,#27923A,#259343,#259353,#279363,#249373,#229382,#249392,#2692A1,#2891B1,#2790BF,#2A8FCD,#328FCE,#3E8CCB,#30A239,#2EA239,#2CA139,#2BA139,#2AA244,#2AA254,#27A263,#26A273,#27A283,#27A292,#28A2A2,#28A1B1,#28A0C0,#2AA0CE,#30A0DB,#3F9DD8,#37AE37,#37AE37,#37AE37,#36AE39,#35AE46,#33AF55,#31B063,#2FB173,#2BB283,#29B292,#2AB1A2,#2BB1B1,#29B0C0,#2BB0CF,#2EB0DE,#3BAFE5,#4AB134,#4AB134,#4AB136,#4AB23F,#49B24B,#48B356,#47B363,#46B471,#44B580,#43B68E,#40B79D,#3EB9AC,#3CBABB,#3ABBCB,#3BBDDB,#39BEEC,#57B432,#57B432,#57B436,#57B53F,#57B549,#56B656,#55B662,#56B76F,#56B87D,#56BA8B,#55BB99,#54BCA7,#52BDB5,#52BEC4,#54C0D3,#55C2E1,#63B62F,#63B72F,#63B733,#63B73C,#64B847,#64B853,#63B960,#64BA6D,#64BB7A,#63BC88,#63BE95,#63BFA3,#63C0B1,#65C2BF,#63C3CC,#68C5DA,#6DB92C,#6EB92C,#6EB92C,#6EBA36,#6EBA42,#6FBB4F,#70BC5C,#71BD6A,#70BE78,#70C085,#71C192,#71C29F,#71C3AD,#72C5BB,#72C6C8,#74C8D5,#310204,#310211,#300621,#2D1230,#2A1D3C,#2B2447,#2B2952,#2B2B5D,#2B286C,#2B237F,#2C258A,#2F318F,#2F3993,#2D3E97,#2D4399,#2C479C,#311205,#321010,#320F21,#311232,#2D1E3F,#2C264B,#2C2B55,#2D2B62,#2D2774,#2C2283,#2E2A8C,#2E3491,#2E3A94,#2F4097,#2F449A,#2D489D,#31230D,#322110,#332121,#322132,#322143,#302352,#2D295D,#2D286D,#2D247D,#2E258A,#30308F,#303893,#303E96,#304299,#2F479B,#2E4B9E,#323317,#323316,#323221,#323333,#323243,#313253,#303263,#303172,#2F3181,#2F328E,#303893,#323E96,#314399,#32479B,#304B9E,#304EA0,#324321,#324321,#324321,#324332,#324343,#324354,#314263,#314273,#304181,#31418F,#304399,#31479B,#324A9D,#334D9F,#3350A1,#3352A3,#32542A,#32542A,#32542A,#325432,#325443,#325354,#325364,#325373,#325282,#315190,#31519E,#3152A3,#3454A4,#3656A5,#3557A6,#3559A7,#336432,#336432,#336432,#326432,#326443,#326453,#326464,#326474,#336383,#326292,#32619F,#3361AD,#3461AD,#3661AD,#3761AD,#3861AD,#347437,#347437,#347337,#337437,#327443,#317453,#317463,#327474,#337383,#347392,#3472A1,#3471AE,#3470B8,#376FB7,#3A6DB5,#3C6CB4,#368339,#358339,#348339,#348339,#328343,#328353,#338463,#328474,#328483,#348393,#3382A2,#3381B0,#3480BE,#3780C3,#3D7DC1,#417ABE,#379339,#379339,#379339,#359339,#349343,#339353,#349363,#339373,#339383,#339393,#3392A2,#3591B1,#3590BF,#3790CD,#3E8FCE,#468CCB,#3BA238,#3AA238,#3AA238,#39A138,#38A244,#36A254,#36A263,#36A273,#36A383,#35A292,#36A2A2,#35A2B1,#35A1C0,#37A0CE,#3CA0DA,#499ED8,#3FAF36,#3FAF36,#3FAF36,#3FAF39,#3DB046,#3BB055,#3AB164,#39B273,#36B283,#36B292,#35B2A2,#36B1B1,#37B1C0,#39B0CF,#3BB0DF,#45AFE4,#4FB233,#50B233,#50B336,#50B33F,#4FB34A,#4EB456,#4EB563,#4CB571,#4AB680,#49B78F,#46B89E,#46BAAD,#43BBBC,#42BCCC,#43BEDD,#42BFED,#5BB531,#5CB531,#5CB536,#5CB63F,#5CB64A,#5BB756,#5BB762,#5BB870,#5AB97D,#5ABB8B,#5ABC9A,#59BDA8,#57BEB6,#57BFC5,#59C1D4,#5BC3E2,#67B72E,#67B72E,#67B833,#67B83C,#67B947,#67B953,#67BA61,#67BB6D,#67BC7A,#67BD88,#67BF96,#67C0A4,#67C1B2,#68C3C0,#67C4CD,#6BC6DB,#71BA2B,#71BA2B,#71BA2C,#72BB37,#72BC43,#73BC4F,#73BD5D,#73BE6A,#73BF78,#74C185,#74C293,#74C3A0,#74C4AE,#75C6BB,#76C7C9,#76C9D6,#420206,#420311,#420722,#401132,#3B1C3F,#382449,#372953,#392A60,#3B2672,#3C2182,#3D278B,#3A318F,#393893,#383E96,#374298,#35479B,#411308,#430F10,#430F21,#431132,#3F1C42,#3B254C,#392A57,#3A2966,#3C2577,#3E1F85,#3D2A8C,#3B3390,#3A3A94,#393F97,#384399,#36489C,#41230E,#432110,#432121,#432132,#422142,#422252,#3F2760,#3F266F,#40227D,#3F268A,#3D308F,#3C3792,#3A3D96,#3A4298,#39469B,#374A9D,#423316,#433216,#433221,#433232,#433243,#423253,#423263,#403172,#403181,#3F328E,#3F3892,#3E3E96,#3C4299,#3C469B,#3A4A9D,#384D9F,#424420,#43441F,#434321,#444332,#444344,#434354,#424364,#414273,#404181,#404190,#404399,#3E479B,#3E4A9D,#3D4D9F,#3C4FA1,#3B52A2,#425429,#435428,#435428,#435432,#435443,#435454,#425464,#425373,#425282,#415291,#40519F,#4053A2,#3F54A3,#4055A4,#3E57A5,#3D58A6,#436430,#436430,#436430,#426432,#426443,#436554,#426465,#426474,#426383,#426292,#4261A0,#4161AC,#4161AC,#4161AC,#4160AC,#4061AC,#437435,#437435,#427435,#427435,#427443,#427454,#427464,#437475,#437484,#427393,#4372A1,#4271AF,#4371B7,#436FB6,#446DB5,#446BB3,#448438,#448438,#448438,#438438,#438443,#438453,#428463,#428474,#438484,#448394,#4382A2,#4381B1,#4380BE,#4680C2,#497DC0,#4B7BBE,#479337,#479337,#469337,#459337,#449343,#449353,#439464,#459473,#449483,#439393,#4393A3,#4492B1,#4591C0,#4590CD,#498FCD,#518DCB,#48A236,#47A236,#45A236,#45A236,#45A244,#45A254,#45A363,#44A373,#43A383,#43A393,#43A3A3,#43A2B2,#44A1C1,#46A1CF,#4AA0D9,#539FD7,#49B134,#48B134,#48B134,#48B138,#48B246,#47B255,#45B264,#45B373,#45B283,#45B292,#44B2A2,#45B2B2,#45B1C1,#46B1D0,#48B1DF,#50B0E4,#57B432,#57B432,#57B435,#57B440,#57B54A,#57B657,#55B664,#55B772,#53B881,#51B990,#50BA9F,#50BCAE,#4DBDBE,#4DBECE,#4CC0DE,#4CC1EF,#62B62F,#62B632,#62B637,#62B740,#62B84A,#62B857,#61B962,#62BA70,#62BB7E,#61BC8C,#61BD9B,#5EBEA8,#5EC0B8,#5EC1C6,#60C3D5,#61C5E4,#6CB92D,#6CB92E,#6CB934,#6CBA3D,#6CBA48,#6DBB54,#6CBC61,#6CBC6E,#6DBE7B,#6CBF89,#6DC097,#6CC1A5,#6DC3B3,#6DC4C1,#6DC6CE,#71C8DC,#75BB2A,#75BC2A,#76BC2C,#76BC38,#76BD43,#77BE50,#77BF5D,#78C06B,#77C179,#78C286,#79C393,#78C4A1,#79C6AF,#7AC7BC,#7AC9CA,#7ACAD7,#52080D,#530912,#530B22,#511233,#4E1A42,#49234E,#482759,#4A2767,#4B2376,#4C1D85,#4A268A,#48308F,#453792,#443D95,#414298,#3F469B,#52130F,#530F10,#530F21,#531232,#511A43,#4D2350,#4B275C,#4C266A,#4D227A,#4D1E87,#4A2A8C,#483390,#463993,#443E96,#424399,#40479B,#522311,#532111,#542121,#542132,#532042,#522152,#502561,#502471,#50217F,#4F258A,#4C308E,#493792,#473C95,#444198,#42469A,#41499C,#533317,#533316,#543321,#543232,#533243,#533253,#523163,#513172,#513180,#50318F,#4D3892,#4A3D95,#484298,#45469A,#44499C,#414D9F,#53441F,#53441E,#544321,#544433,#544343,#544354,#524364,#524273,#514282,#504190,#4F4398,#4C469A,#4A499C,#474C9E,#464EA0,#4351A2,#525427,#525427,#535426,#545432,#545444,#555555,#545465,#525374,#515283,#515291,#5051A0,#4F53A2,#4C54A2,#4A55A3,#4856A4,#4657A5,#53652E,#53652E,#54642E,#546432,#546543,#546554,#546565,#546475,#526384,#526293,#5161A0,#4F61AB,#4F61AB,#4C60AB,#4B60AB,#4960AB,#537433,#547433,#547433,#547433,#547443,#547554,#547565,#547575,#547484,#537393,#5372A2,#5271B0,#5171B6,#516FB5,#4F6DB4,#4F6CB3,#548436,#548436,#548436,#548436,#538443,#538453,#548564,#538574,#548585,#538494,#5483A3,#5382B1,#5281BF,#5380C1,#557EC0,#567CBE,#549435,#549435,#539335,#539336,#539343,#549453,#539464,#549474,#539484,#549494,#5493A3,#5392B2,#5491C0,#5491CD,#5790CC,#5C8ECA,#56A334,#55A334,#54A234,#54A235,#54A344,#54A354,#54A363,#53A374,#54A484,#53A493,#53A3A3,#53A2B2,#54A2C1,#55A1D0,#58A1D8,#5F9FD6,#55B232,#55B232,#55B232,#55B237,#54B346,#54B355,#54B364,#54B273,#55B383,#54B393,#54B3A2,#54B2B2,#55B2C1,#56B2D1,#58B1E0,#5EB0E3,#61B62F,#61B62F,#61B635,#60B740,#60B74B,#60B857,#60B964,#5EB973,#5CBA81,#5CBB91,#5CBDA0,#5ABEB0,#58BFC0,#58C0D0,#58C2E0,#5BC1EF,#6AB830,#6AB833,#6AB938,#6AB941,#6AB94B,#69BA57,#6ABB63,#69BC71,#69BD7F,#69BF8D,#68BF9C,#67C1AA,#67C2B9,#67C3C8,#68C5D7,#68C6E6,#72BB2B,#72BB2E,#73BB35,#73BC3E,#73BC49,#73BD55,#73BE62,#73BE6F,#73C07C,#74C18A,#73C297,#73C4A6,#73C5B4,#74C6C2,#74C8D0,#78CADE,#7BBD28,#7BBD28,#7BBD2C,#7CBE38,#7CBF44,#7CBF51,#7DC05E,#7DC16C,#7DC279,#7FC486,#7FC594,#7FC6A2,#7FC8B0,#80C9BE,#7FCACB,#81CCD8,#620F13,#621014,#621123,#621433,#611A44,#5D2152,#5B255E,#5B246C,#5C207B,#5C1A86,#58278B,#55308E,#523792,#4E3C95,#4C4197,#494599,#631314,#631114,#641122,#631432,#621A43,#602152,#5D2560,#5D236E,#5D1E7D,#5D1E87,#592B8C,#553390,#523993,#4E3E95,#4C4398,#49469A,#632316,#632216,#642121,#642132,#642142,#632152,#612362,#602270,#602180,#5F268A,#5A308E,#563791,#523C94,#4F4197,#4D4599,#4A489B,#633319,#633319,#643221,#643232,#643243,#643253,#633163,#623172,#613181,#5F328F,#5C3892,#573D95,#544197,#51459A,#4D499B,#4B4C9E,#63441F,#63441E,#654321,#644332,#654343,#644354,#634263,#624273,#624281,#614190,#5F4398,#5A469A,#55499B,#524B9D,#4F4E9F,#4D50A0,#635525,#645425,#645425,#655433,#655444,#655454,#645464,#635374,#635283,#615291,#60529F,#5E53A1,#5953A2,#5554A2,#5255A3,#4F57A4,#63652C,#63652B,#64652B,#656432,#656543,#646555,#666666,#646576,#646484,#626393,#6162A1,#5F62AB,#5D61AB,#5960AA,#565FAA,#5360AA,#637530,#637530,#637530,#647532,#657543,#647554,#657665,#657676,#647585,#647494,#6273A3,#6172B1,#6071B5,#5F70B5,#5B6EB3,#5A6DB3,#638533,#638533,#648533,#648533,#648543,#638554,#648564,#648675,#648586,#648595,#6484A4,#6282B2,#6181C0,#6281C1,#6380BF,#627DBE,#649433,#639433,#639433,#639434,#639444,#639454,#649564,#649575,#649585,#649595,#6494A4,#6393B3,#6392C1,#6491CC,#6691CC,#688FCA,#64A331,#64A331,#64A331,#63A335,#63A344,#64A453,#64A464,#64A474,#64A584,#64A494,#64A4A4,#64A3B3,#64A2C2,#65A2D1,#67A1D7,#6BA0D6,#64B22F,#64B22F,#64B22F,#64B236,#64B246,#64B255,#65B364,#64B373,#64B384,#65B393,#63B3A3,#63B3B3,#64B2C2,#65B2D2,#66B2E1,#6CB1E2,#6CB92D,#6CB92E,#6CB934,#6BB93F,#6BBA4B,#6ABA57,#69BB65,#69BC74,#69BD83,#68BE92,#67C0A2,#66C1B2,#65C2C2,#65C3D2,#67C2E2,#69C2EE,#73BB2F,#73BB33,#73BB39,#73BC41,#73BC4C,#72BD58,#73BE64,#73BF72,#72C080,#72C18F,#72C29D,#71C3AC,#70C5BB,#71C6CA,#72C8D9,#72C9E9,#7ABD2B,#7ABD2E,#7BBE36,#7BBE3F,#7BBF4A,#7BBF56,#7BC063,#7BC170,#7CC27E,#7CC48B,#7CC599,#7BC6A7,#7DC8B5,#7DC9C4,#7DCAD2,#80CDE0,#82BF25,#82BF25,#83C02C,#83C039,#83C145,#84C252,#84C35F,#84C46D,#85C57A,#86C687,#86C896,#86C9A3,#87CAB1,#86CBBF,#87CDCC,#88CFDA,#72151A,#72151A,#731624,#721734,#711B44,#6F1F53,#6D2361,#6D216F,#6D1C7D,#6B1886,#67288B,#62318E,#5D3791,#593D94,#564197,#524499,#72151A,#73151A,#731622,#731732,#721B43,#711F53,#702262,#6F2070,#6F1A7E,#6C1E87,#672C8C,#62338F,#5D3992,#593E95,#564297,#534599,#72241B,#73221B,#742121,#742132,#732142,#732052,#722262,#712171,#712080,#6D288B,#68318E,#623791,#5E3C94,#5A4196,#574499,#54479B,#73341C,#73331D,#743221,#743232,#743242,#733253,#733162,#723172,#713181,#6F328E,#6B3892,#643E95,#604297,#5B4599,#58489B,#554B9C,#73441F,#74441F,#744321,#744332,#744343,#754353,#744263,#734273,#724282,#704190,#6D4497,#674699,#61499B,#5D4B9C,#584E9E,#55509F,#735524,#745524,#755424,#755432,#755443,#755454,#755464,#745374,#735383,#715291,#70519F,#6C53A0,#6553A1,#6054A2,#5C55A2,#5956A3,#746529,#746529,#746529,#756533,#766544,#766555,#766565,#756575,#746485,#736393,#7162A1,#6F62AA,#6D63AA,#6661AA,#6160A9,#5E61AA,#73752D,#74752D,#74752D,#757532,#757543,#757654,#767666,#767777,#767586,#747495,#7373A3,#7172B1,#7072B4,#6E72B4,#6970B3,#666FB3,#748530,#748530,#748530,#748533,#758544,#758554,#758665,#768776,#768787,#758596,#7484A5,#7383B2,#7282C0,#7182C0,#7181BF,#6E7FBE,#74942F,#74942F,#73942F,#749432,#749444,#749554,#749564,#759676,#759685,#759696,#7495A5,#7494B4,#7493C2,#7493CB,#7592CB,#7591CA,#74A32E,#74A32E,#74A32E,#74A335,#74A444,#74A454,#74A464,#74A574,#75A585,#75A695,#75A5A5,#74A4B4,#75A4C3,#75A3D2,#76A2D6,#78A1D5,#74B22C,#74B22C,#74B32C,#74B236,#73B346,#74B354,#74B364,#74B474,#74B484,#74B594,#74B5A4,#74B4B4,#74B3C3,#75B3D3,#76B3E2,#7AB1E0,#77BC29,#77BC2B,#77BC32,#76BD3E,#76BD4A,#77BE58,#76BF66,#76C074,#76C183,#74C293,#75C4A4,#73C4B3,#74C4C3,#75C3D3,#76C3E2,#79C2ED,#7DBE30,#7DBE34,#7DBF3A,#7DBF42,#7DC04D,#7DC059,#7DC165,#7DC273,#7DC382,#7EC591,#7DC69F,#7CC7AE,#7CC8BD,#7CCACC,#7DCBDC,#7DCDEC,#84C02A,#84C02F,#84C137,#84C140,#85C24B,#84C257,#84C364,#85C471,#86C67F,#86C78C,#85C89B,#85C9A9,#87CBB7,#86CCC6,#87CED4,#8AD0E3,#8AC221,#8BC224,#8BC22D,#8CC33A,#8CC447,#8CC553,#8CC560,#8DC66F,#8DC87C,#8EC989,#8ECA97,#8FCCA5,#8FCDB3,#8FCEC1,#90D0CF,#91D2DC,#811A1F,#811A1F,#811A24,#821A34,#811C44,#801F54,#7F2063,#7E1D70,#7D167E,#7A1A86,#752A8B,#6E328F,#693891,#643D94,#604096,#5D4498,#811A1F,#821A1F,#831A22,#821B33,#821C43,#811F53,#802062,#801C71,#7E167E,#7C1F88,#752D8D,#6F3490,#6A3A92,#653E95,#614197,#5D4599,#81251F,#82241F,#832220,#832132,#832142,#822152,#822161,#812170,#802280,#7E278A,#77328E,#703891,#6B3D94,#664196,#614498,#5D479A,#823420,#833320,#843221,#843232,#843242,#833252,#833262,#823271,#813281,#7F328E,#793A92,#723E94,#6C4297,#674598,#62489A,#5E4A9C,#834422,#834422,#844322,#854332,#844243,#844253,#834363,#834272,#824282,#804190,#7E4497,#754799,#6E499A,#684B9C,#634D9D,#5F4F9F,#845524,#845524,#855424,#855433,#855443,#855454,#845364,#845373,#825283,#825291,#7F529E,#7A539F,#7354A0,#6C54A1,#6755A2,#6256A3,#846527,#846527,#856427,#866533,#866543,#866554,#856565,#856575,#846484,#836393,#8162A1,#7F62A8,#7A63A9,#7462A9,#6E62AA,#6962AA,#84752A,#84752A,#84752A,#857532,#857543,#867654,#877666,#877676,#867586,#847495,#8373A3,#8172B1,#8073B3,#7D73B4,#7671B3,#7271B3,#84852C,#84852C,#84852C,#858533,#858544,#858654,#868666,#878776,#888888,#868697,#8585A5,#8484B4,#8283BE,#8283BF,#8083BF,#7A81BE,#84952B,#84952B,#84942B,#849434,#849544,#859554,#869665,#869776,#879787,#879797,#8696A7,#8595B5,#8494C4,#8494CA,#8493CA,#8392C9,#83A429,#84A429,#84A429,#83A435,#84A444,#85A454,#85A564,#86A675,#86A686,#86A796,#86A7A7,#85A5B5,#85A5C5,#85A4D4,#86A3D5,#87A2D4,#83B327,#83B327,#84B32A,#84B337,#83B346,#84B455,#84B464,#84B475,#85B585,#85B696,#85B6A5,#85B5B5,#85B5C5,#86B4D4,#86B4E1,#89B3DF,#85C024,#84C027,#84C02F,#84C13B,#84C149,#84C257,#84C366,#84C475,#85C485,#84C494,#84C5A4,#84C5B4,#85C4C5,#85C4D4,#86C4E3,#8AC3EB,#88C22F,#88C233,#88C23A,#88C242,#89C34D,#89C45A,#89C567,#89C675,#89C783,#89C892,#8ACAA1,#89CBB0,#89CCC0,#89CED0,#8AD0E0,#8AD1F1,#8EC32C,#8EC431,#8EC438,#8FC542,#8FC54D,#8FC659,#8FC765,#8FC872,#90C980,#90CA8E,#90CC9D,#91CDAB,#91CEBA,#92D0C9,#92D1D7,#95D4E6,#94C523,#94C527,#94C62F,#95C63B,#95C748,#95C855,#96C962,#96CA70,#97CB7D,#98CD8B,#98CE99,#98CFA7,#99D1B5,#99D2C3,#99D3D1,#9BD5DF,#901D22,#911D22,#911D24,#911D34,#911D44,#901D53,#901C62,#8F1871,#8E0F7E,#8A1C87,#832B8C,#7C348F,#763992,#703D94,#6B4196,#664498,#901D22,#911D22,#921D23,#921D33,#911D43,#911D53,#901C62,#901870,#8F147F,#8B2088,#842E8D,#7D3690,#763B92,#703F95,#6B4297,#664598,#912622,#922423,#932223,#922132,#922141,#922252,#912261,#912170,#8F227F,#8D288A,#85338E,#7D3991,#773E94,#714196,#6C4498,#664799,#913523,#923423,#933323,#933232,#933242,#933252,#933262,#923171,#903280,#8F328E,#883B92,#7F3F94,#784296,#724598,#6D489A,#684A9B,#934523,#934423,#944323,#944232,#944242,#944353,#934262,#924272,#914281,#904190,#8C4596,#824899,#7B4A9A,#744C9B,#6E4E9D,#694F9E,#935524,#945424,#955424,#955433,#955443,#955353,#955363,#945373,#935282,#915191,#8F529D,#8A559F,#8155A0,#7956A1,#7357A2,#6E58A3,#946525,#946525,#956525,#956432,#956543,#956454,#966464,#956474,#946384,#936393,#9162A1,#8E63A7,#8964A8,#8064A9,#7965AA,#7565AB,#947527,#947527,#957526,#967533,#967543,#967554,#977665,#967576,#967585,#947495,#9373A3,#9172B1,#8F73B2,#8A74B3,#8373B3,#7D73B4,#948627,#958527,#958527,#968533,#968643,#978654,#978665,#988776,#988787,#978697,#9585A5,#9484B4,#9283BD,#9184BD,#8E84BE,#8882BD,#949526,#959526,#959526,#959535,#969544,#969654,#969665,#979776,#989887,#999899,#9898A8,#9696B6,#9595C5,#9494C8,#9394C8,#9294C9,#94A424,#94A424,#94A427,#94A436,#95A545,#95A555,#96A665,#96A675,#97A786,#97A897,#97A8A8,#97A7B7,#96A6C6,#95A5D4,#96A4D3,#95A4D3,#93B321,#93B321,#93B329,#94B438,#94B446,#95B455,#95B565,#95B575,#96B686,#96B797,#97B7A7,#96B7B7,#96B7C7,#96B6D6,#97B5DF,#98B4DE,#93C31E,#93C323,#94C32C,#94C33A,#94C347,#94C457,#94C465,#94C474,#95C585,#95C595,#95C5A6,#95C6B6,#95C6C6,#97C6D6,#96C6E5,#99C4E9,#95C62D,#95C632,#95C73A,#95C742,#96C84D,#96C85A,#95C968,#96CA75,#97CC84,#97CD94,#97CFA3,#98D0B3,#97D1C3,#98D3D4,#97D4E4,#98D6F5,#99C72E,#99C833,#99C83A,#99C843,#9AC94E,#9ACA5A,#9ACB67,#9BCC74,#9CCD82,#9CCF91,#9CD09F,#9DD1AE,#9ED3BD,#9ED4CC,#9ED6DB,#A0D8EA,#9EC928,#9EC92C,#9ECA33,#9FCA3E,#9FCB4B,#A0CC57,#A0CD64,#A1CE71,#A1CF7F,#A1D08D,#A3D29B,#A3D3AA,#A4D5B8,#A4D6C6,#A5D8D4,#A6D9E2,#A01F24,#A11F24,#A11F24,#A11E34,#A01D44,#A01B53,#A01862,#9F1270,#9E0B7E,#9A1E87,#912D8C,#89368F,#823B92,#7C3F94,#764296,#714598,#A01F24,#A11F24,#A11F24,#A11E33,#A11D43,#A11B52,#A01861,#9F1570,#9F157E,#9B2288,#92308D,#8A3790,#823C93,#7C4095,#764397,#714698,#A02624,#A12524,#A22324,#A22232,#A12342,#A12251,#A12261,#A02370,#9F237F,#9D298A,#94348F,#8C3B92,#833F94,#7D4396,#774598,#714899,#A13624,#A23524,#A33324,#A33332,#A23342,#A23352,#A13362,#A13371,#A03380,#9E348E,#973C91,#8D4194,#854496,#7E4798,#78499A,#724B9B,#A24524,#A34424,#A34324,#A44232,#A34342,#A34253,#A34262,#A24272,#A14281,#9F4290,#9C4596,#904998,#884C9A,#804D9B,#7A4F9D,#75519E,#A35523,#A35423,#A45323,#A45332,#A45342,#A45353,#A45363,#A35272,#A25282,#A15190,#9E529C,#97559E,#8D57A0,#8559A2,#7F5AA3,#7A5BA4,#A46523,#A46523,#A56423,#A56433,#A56443,#A56454,#A56464,#A46374,#A46383,#A26292,#A161A1,#9E63A6,#9665A8,#8D66A9,#8667AA,#8168AC,#A57523,#A57523,#A57524,#A67533,#A67543,#A67554,#A77564,#A67575,#A57485,#A47494,#A372A3,#A172AF,#9D74B1,#9775B2,#8F75B3,#8975B4,#A58622,#A58522,#A68524,#A68534,#A68544,#A68654,#A78665,#A88676,#A78686,#A78696,#A685A5,#A484B3,#A284BB,#9F85BC,#9A85BD,#9484BD,#A59520,#A59520,#A59523,#A59534,#A69644,#A69654,#A79765,#A89776,#A99887,#A99898,#A897A8,#A696B7,#A495C5,#A395C7,#A195C7,#9E95C7,#A4A51D,#A4A51D,#A5A527,#A5A536,#A5A546,#A6A655,#A6A665,#A7A775,#A8A887,#A9A998,#AAAAAA,#A9A8B9,#A8A7C7,#A6A6D2,#A5A5D2,#A4A5D2,#A4B419,#A4B41D,#A4B428,#A4B437,#A4B547,#A5B555,#A5B565,#A6B675,#A7B786,#A7B897,#A9B9A8,#A9B9B9,#A8B9C9,#A8B7D7,#A7B6DD,#A8B5DC,#A3C31C,#A3C324,#A3C32E,#A3C339,#A3C348,#A4C456,#A5C565,#A5C575,#A5C685,#A6C696,#A7C7A7,#A7C8B7,#A7C8C8,#A8C8D8,#A7C7E8,#A9C5E7,#A3CB2A,#A3CB2F,#A3CC37,#A4CC41,#A4CD4D,#A4CD59,#A4CE68,#A4CF76,#A6D185,#A5D295,#A6D4A5,#A7D6B6,#A6D7C7,#A7D7D7,#A7D7E7,#A9D7F4,#A6CC31,#A6CC35,#A6CD3B,#A6CD44,#A6CE4F,#A7CE5B,#A7CF69,#A7D177,#A8D284,#A9D393,#AAD5A2,#AAD6B1,#ABD8C0,#ABDACF,#ACDBDF,#ADDDEE,#A9CD2B,#A9CE30,#A9CE36,#AACE3F,#AACF4C,#ABD058,#ACD165,#ACD273,#ADD381,#ADD58F,#AED69D,#AFD8AC,#AFD9BB,#B0DBC9,#B1DCD7,#B2DEE6,#B01E23,#B01E23,#B11E24,#B01D33,#B01A43,#B01752,#AF1161,#AE0D6F,#AD0C7E,#A92088,#A0308C,#973890,#8F3D92,#874195,#824496,#7C4698,#B01E24,#B01E24,#B11E23,#B01D32,#B01A42,#B01751,#B01661,#AF1670,#AE177F,#AA2489,#A0328D,#973A91,#903F93,#884295,#824597,#7C4798,#B02723,#B12523,#B22423,#B12332,#B12342,#B02452,#B02461,#B02470,#AE237F,#AC2B8B,#A2378F,#983D92,#904194,#894596,#824798,#7C4999,#B13623,#B23623,#B23423,#B23332,#B23342,#B13452,#B13361,#B03371,#AF327F,#AD348E,#A53D91,#9B4394,#924696,#8A4999,#834B9A,#7E4D9B,#B24522,#B34422,#B34323,#B34232,#B34342,#B24352,#B14362,#B14371,#B04280,#AF428F,#A94796,#9E4B98,#944D9A,#8D509C,#86529E,#81549F,#B35521,#B35421,#B45322,#B45333,#B45343,#B35353,#B35363,#B25272,#B25281,#B15190,#AD539B,#A5569D,#9A58A0,#925BA2,#8C5CA3,#865EA5,#B46520,#B46420,#B56424,#B56433,#B56343,#B56454,#B46364,#B46373,#B36283,#B26291,#B061A1,#AC64A5,#A265A7,#9968A9,#9369AB,#8D6BAC,#B5751E,#B5751E,#B57524,#B57533,#B67443,#B67454,#B67464,#B57474,#B57484,#B47393,#B272A2,#B073AE,#AA74AF,#A376B2,#9C77B3,#9578B4,#B5851B,#B5851B,#B58523,#B68535,#B68544,#B78554,#B78564,#B78675,#B78585,#B68595,#B584A4,#B484B4,#B185BA,#AB86BB,#A586BC,#9F86BD,#B59518,#B5951A,#B59526,#B69535,#B69544,#B79654,#B79665,#B89676,#B89787,#B89797,#B796A7,#B696B6,#B595C4,#B296C5,#AD96C6,#A896C6,#B4A513,#B5A51A,#B5A526,#B5A535,#B6A645,#B6A654,#B7A765,#B8A776,#B9A887,#B9A898,#BAA9A8,#B9A8B8,#B8A7C7,#B6A7D0,#B4A6D0,#B1A5D0,#B4B417,#B4B41F,#B4B42A,#B5B537,#B5B546,#B5B656,#B6B666,#B7B775,#B8B886,#B9B997,#BABAA9,#BCBBBB,#B9B9CA,#B8B8D9,#B7B7DB,#B6B6DB,#B3C31A,#B3C322,#B3C42D,#B4C43A,#B4C447,#B4C456,#B5C565,#B6C675,#B6C686,#B7C897,#B8C9A8,#B9CAB9,#B9CACA,#B9C9DA,#B9C8E7,#B9C6E6,#B3D124,#B3D12A,#B3D133,#B3D23E,#B3D24B,#B3D359,#B4D467,#B5D575,#B5D585,#B6D796,#B7D7A7,#B7D8B7,#B8D8C8,#B8D9D9,#B8D8E8,#BAD8F1,#B2D134,#B2D137,#B3D23D,#B3D246,#B3D351,#B4D45D,#B5D56A,#B5D679,#B6D786,#B7D995,#B8DAA4,#B9DCB4,#B9DEC3,#BADFD3,#B9E1E3,#BAE2F3,#B6D22D,#B6D332,#B6D339,#B6D342,#B7D44E,#B7D55A,#B8D667,#B8D776,#B9D884,#BADA92,#BBDBA0,#BCDDAF,#BCDEBE,#BDE0CD,#BEE2DB,#C0E3EA,#BF1A20,#C01A20,#C01924,#C01733,#BF1442,#BF0F51,#BE0E60,#BE0E6F,#BD117E,#B82288,#AE328D,#A43A90,#9C3F93,#944395,#8D4697,#874898,#BF1C20,#C01A20,#C01924,#C01833,#C01842,#BF1751,#BF1760,#BE1970,#BD1A7E,#BA2589,#AF348E,#A53C91,#9D4193,#944596,#8E4797,#874999,#C02720,#C12620,#C12523,#C12432,#C02442,#C02451,#BF2561,#BF2670,#BE267F,#BB2C8B,#B0388F,#A63F92,#9D4495,#954797,#8E4A99,#884B9A,#C1371F,#C1351F,#C13422,#C13432,#C13442,#C03452,#C03461,#BF3470,#BE337F,#BC358E,#B43F92,#A84595,#9E4897,#964B99,#8F4D9A,#8A509C,#C1451E,#C2441E,#C24423,#C24333,#C24342,#C14352,#C14362,#C04371,#BF4280,#BE438F,#B84795,#AC4C98,#A2509A,#9A529C,#93559F,#8D58A0,#C3551C,#C3541C,#C35324,#C35333,#C35343,#C35353,#C25362,#C15372,#C05381,#BF5290,#BC539A,#B2579D,#A85AA0,#9F5DA2,#985FA4,#9262A6,#C4641A,#C4641A,#C46424,#C46433,#C46443,#C46353,#C36363,#C26273,#C26282,#C16291,#C062A0,#B964A4,#AF67A7,#A66AA9,#9F6CAB,#996DAD,#C47517,#C57418,#C57425,#C57435,#C57444,#C57454,#C57464,#C47474,#C47383,#C37393,#C272A1,#BF73AC,#B775AF,#AF77B1,#A779B3,#A07AB5,#C58513,#C58518,#C58526,#C58535,#C58544,#C68554,#C68564,#C68574,#C68485,#C58494,#C484A4,#C383B3,#BF84B8,#B786BA,#B087BB,#AA88BD,#C5950F,#C59518,#C59526,#C69535,#C69545,#C69555,#C79664,#C79675,#C79686,#C79696,#C796A6,#C695B5,#C495C2,#BF96C4,#B897C5,#B297C6,#C5A512,#C5A51B,#C5A528,#C5A536,#C6A545,#C6A654,#C7A665,#C8A775,#C8A786,#C9A897,#C9A8A8,#C8A7B8,#C7A7C7,#C5A7CE,#C0A7CF,#BAA6CF,#C4B516,#C4B520,#C4B52B,#C4B537,#C5B546,#C5B556,#C6B665,#C7B775,#C8B886,#C9B997,#CAB9A9,#CBBABA,#CAB9CA,#C9B9D9,#C6B8D9,#C3B6D9,#C4C41A,#C4C423,#C4C42D,#C4C43A,#C5C547,#C5C556,#C6C566,#C6C676,#C7C786,#C8C896,#CAC9A8,#CBCBBA,#CCCCCC,#CBCADB,#C9C9E5,#C9C7E4,#C3D320,#C3D326,#C3D42F,#C3D43C,#C4D449,#C4D457,#C4D566,#C5D575,#C6D685,#C7D796,#C8D8A7,#C9D9B8,#CADAC9,#CADBDB,#CADAEB,#CAD8EF,#C2D734,#C2D738,#C2D83D,#C2D847,#C3D952,#C3DA5E,#C3DB6B,#C4DC79,#C5DD88,#C6DF96,#C7E0A6,#C8E2B6,#C9E4C7,#CAE6D7,#CAE7E8,#CAE9F9,#C2D731,#C2D835,#C3D83C,#C3D844,#C4D950,#C4DA5D,#C5DB6A,#C6DC78,#C6DE87,#C7DF95,#C8E1A3,#C9E2B2,#CBE4C1,#CCE6D0,#CCE8E0,#CDE9EE,#CF151B,#CF141B,#CF1224,#CF1032,#CF1341,#CE1351,#CE1261,#CD116F,#CC117E,#C72488,#BC348D,#B23C91,#A94293,#A04696,#984897,#924B99,#CF1D1B,#CF1C1B,#CF1A24,#CF1932,#CF1B41,#CE1C51,#CE1C61,#CD1B70,#CC1B7F,#C92789,#BD368E,#B33E91,#A94394,#A14796,#994A98,#924C9A,#D0291A,#D0271A,#D02624,#D02533,#CF2742,#CF2752,#CE2761,#CD2870,#CD287F,#CA2D8B,#BF3A8F,#B44293,#AA4695,#A24997,#9A4C99,#934F9B,#D03719,#D03619,#D13525,#D03533,#D03542,#D03552,#CF3461,#CE3570,#CD3580,#CB368E,#C24092,#B64795,#AC4A97,#A34E99,#9C519B,#96539D,#D14518,#D14418,#D14424,#D14433,#D14442,#D04452,#D04462,#CF4371,#CE4380,#CD438F,#C64995,#BA4F98,#AF529B,#A6559D,#9F59A0,#9A5CA2,#D25515,#D25417,#D25425,#D25433,#D25343,#D25352,#D15362,#D05372,#CF5381,#CE5290,#CB549A,#C0599D,#B55CA0,#AC60A3,#A563A5,#9F65A7,#D36412,#D36417,#D36325,#D36335,#D36343,#D36353,#D26363,#D26373,#D16382,#D06391,#CE62A0,#C665A3,#BC69A6,#B36CA9,#AB6EAB,#A570AD,#D4740E,#D47418,#D47426,#D47434,#D47444,#D47453,#D47364,#D37373,#D27383,#D27392,#D172A1,#CD73AB,#C377AE,#BA79B1,#B37BB3,#AC7DB5,#D4840E,#D48419,#D58426,#D58435,#D58545,#D58454,#D58464,#D58575,#D58484,#D48493,#D383A3,#D283B3,#CB85B6,#C288B9,#BB89BB,#B48ABC,#D59511,#D5951B,#D59527,#D69636,#D69645,#D69654,#D69664,#D79675,#D69585,#D69595,#D695A5,#D594B5,#D295C0,#CB97C2,#C398C4,#BD98C5,#D5A513,#D5A51E,#D5A629,#D5A636,#D6A645,#D6A655,#D6A665,#D7A675,#D8A786,#D8A796,#D8A7A7,#D8A7B7,#D6A6C6,#D3A7CC,#CBA8CE,#C5A7CE,#D4B516,#D5B51F,#D5B52B,#D5B538,#D5B547,#D6B656,#D7B665,#D7B776,#D9B886,#D9B897,#DAB9A8,#DAB9B8,#D9B9C9,#D8B8D7,#D3B8D7,#CDB7D8,#D4C41C,#D4C423,#D4C52E,#D4C53A,#D4C547,#D5C656,#D6C667,#D7C776,#D8C786,#D9C897,#DAC9A8,#DBCAB9,#DBCBCB,#DBCADB,#D9C9E2,#D6C8E2,#D4D421,#D4D425,#D4D42F,#D4D43C,#D4D549,#D5D557,#D5D567,#D6D677,#D7D786,#D8D897,#D9D9A7,#DADAB9,#DBDBCA,#DDDDDD,#DBDCED,#DAD9ED,#D2DE32,#D2DE36,#D2DE3D,#D3DF45,#D3DF51,#D3E05D,#D4E16B,#D5E279,#D5E488,#D7E598,#D8E7A8,#D9E9B9,#DAEBCA,#DBECDB,#DCECEC,#DCEBF9,#D0DD34,#D0DD38,#D1DE3F,#D1DE48,#D1DF53,#D2E060,#D2E16D,#D3E27B,#D4E389,#D6E597,#D7E7A6,#D8E9B5,#D9EAC5,#DAECD5,#DCEEE4,#DDF0F3,#DE1615,#DF1517,#DF1525,#DE1433,#DE1542,#DE1451,#DD1361,#DD1470,#DC147F,#D62588,#CB368E,#C03F91,#B64494,#AD4896,#A54B98,#9E4E9A,#DF1F14,#DF1E17,#DF1E24,#DF1D33,#DE1E42,#DE1D52,#DD1D61,#DD1E70,#DC1D7F,#D72989,#CC388E,#C14192,#B64694,#AD4997,#A54C98,#9F509B,#DF2A14,#DF2916,#DF2924,#DF2933,#DE2A42,#DE2952,#DD2961,#DD2970,#DC297F,#D82E8B,#CE3C8F,#C24493,#B84896,#AE4C98,#A74F9A,#A0539C,#E03712,#E03617,#E03625,#E03633,#DF3643,#DF3652,#DE3661,#DD3671,#DC367F,#DA378E,#D04292,#C44995,#B94D98,#B0519A,#A9549C,#A3599F,#E14510,#E14518,#E14525,#E04534,#E04543,#E04452,#DF4462,#DE4471,#DD4580,#DC448F,#D44A95,#C85098,#BD559B,#B4589E,#AD5CA0,#A65FA3,#E2540E,#E25418,#E25425,#E15334,#E15443,#E15353,#E05462,#DF5472,#DE5380,#DD5390,#D9559A,#CD5A9D,#C25FA0,#B963A3,#B266A6,#AB69A8,#E2650D,#E26418,#E16426,#E16435,#E26443,#E16353,#E16463,#E16372,#E06382,#DF6391,#DD62A0,#D467A3,#C86BA6,#C06EA9,#B771AC,#B173AE,#E3740E,#E37419,#E37426,#E37435,#E37444,#E37354,#E37363,#E27373,#E17383,#E07392,#DF73A1,#DB74AA,#D078AD,#C77BB0,#BF7DB3,#B77FB5,#E48511,#E4851B,#E48427,#E58436,#E58445,#E48454,#E48464,#E48474,#E48484,#E38393,#E283A3,#E184B3,#D886B5,#CE88B8,#C68BBB,#C08CBC,#E59513,#E5951D,#E59528,#E59536,#E59545,#E59555,#E59564,#E69574,#E59585,#E59495,#E595A4,#E494B4,#E095BE,#D697C1,#CE99C3,#C89AC5,#E5A514,#E5A51E,#E5A52A,#E5A537,#E5A546,#E6A655,#E6A665,#E7A675,#E7A685,#E7A696,#E7A6A6,#E7A6B6,#E6A6C6,#DFA7CA,#D6A8CC,#CFA9CE,#E4B518,#E4B520,#E4B52B,#E5B538,#E5B546,#E6B656,#E6B666,#E7B776,#E8B786,#E9B897,#E9B8A7,#E9B8B8,#E9B8C8,#E7B7D4,#DEB8D6,#D7B8D7,#E4C51B,#E4C521,#E5C52C,#E5C53A,#E5C648,#E6C657,#E6C666,#E7C776,#E8C886,#E9C897,#EAC9A8,#EBCAB9,#EBCACA,#EACADA,#E6C9E0,#E0C9E1,#E4D520,#E4D527,#E4D52F,#E4D53C,#E5D54A,#E5D658,#E6D667,#E6D777,#E7D787,#E8D896,#E9D9A8,#EBDAB9,#ECDBCB,#EDDCDC,#EBDBEB,#E8DAEB,#E4E52B,#E4E52F,#E4E537,#E4E541,#E4E64D,#E5E65B,#E6E669,#E6E779,#E7E788,#E8E897,#E9E9A8,#EAEAB9,#EBEBCA,#EDEDDC,#EEEEEE,#ECECF6,#DFE338,#DFE43C,#E0E443,#E0E44C,#E0E556,#E1E663,#E2E770,#E2E87E,#E4EA8B,#E5EB9A,#E6EDA9,#E8EFB9,#E9F1C9,#EAF3D9,#ECF5E9,#EDF7F9,#E71F19,#E71F20,#E71E2A,#E61D37,#E61D45,#E61E53,#E61D62,#E61F71,#E6207F,#E62889,#D9378E,#CE4192,#C34794,#B94B97,#B24F99,#AB539B,#E72619,#E72620,#E7252A,#E72437,#E72445,#E72453,#E62462,#E62471,#E6257F,#E62B8A,#DA398E,#CE4392,#C44895,#BA4C97,#B2519A,#AC549C,#E72F18,#E72F20,#E72F2A,#E72E37,#E72E45,#E72D53,#E72D62,#E72D71,#E62E7F,#E6308B,#DC3D90,#D04693,#C54A96,#BB4F98,#B4549B,#AD589E,#E83B18,#E83B1F,#E83A2A,#E83A37,#E83A45,#E83953,#E73962,#E73971,#E7397F,#E7398E,#DF4492,#D34A95,#C75098,#BD549B,#B6599E,#AF5CA0,#E94819,#E94820,#E9472B,#E94737,#E94745,#E94754,#E84763,#E84771,#E84680,#E8468E,#E34C95,#D65298,#CA579C,#C15C9F,#B960A1,#B363A4,#EA5519,#EA5520,#EA552A,#EA5537,#EA5545,#EA5554,#EA5563,#E95472,#E95481,#E9548F,#E8569A,#DA5C9D,#D061A1,#C666A4,#BE69A6,#B76CA9,#EC651A,#EC6521,#EC652B,#EC6538,#EC6446,#EB6455,#EB6363,#EB6373,#EB6482,#EA6390,#EA639F,#E168A3,#D66CA6,#CC70A9,#C473AC,#BD76AF,#EE751B,#EE7522,#EE742C,#EE7438,#ED7446,#ED7455,#ED7363,#ED7373,#EC7383,#EC7391,#EC73A0,#EA75AA,#DD79AD,#D37DB0,#CB7FB3,#C482B5,#F08519,#F08521,#F0842B,#F08438,#F08447,#EF8455,#EF8364,#EF8374,#EE8383,#EE8393,#EE83A2,#EE84B2,#E587B5,#DA8AB8,#D28CBA,#CB8EBC,#F29518,#F29520,#F2942B,#F29438,#F29447,#F29456,#F19465,#F19475,#F19485,#F09495,#F094A4,#F094B3,#EE96BD,#E298C0,#D99AC2,#D29CC5,#F5A517,#F5A520,#F5A52B,#F5A538,#F5A547,#F5A557,#F4A566,#F4A576,#F4A586,#F3A596,#F3A6A6,#F2A5B5,#F2A5C5,#ECA7C9,#E1A9CB,#D9AACD,#F5B617,#F5B620,#F5B62B,#F5B638,#F6B646,#F6B655,#F6B666,#F7B776,#F6B686,#F6B697,#F6B7A7,#F5B7B7,#F5B7C7,#F5B8D2,#E9B9D4,#E2B9D6,#F5C51D,#F5C523,#F5C52D,#F5C53A,#F5C649,#F6C657,#F7C767,#F7C777,#F8C887,#F9C898,#F9C9A8,#F8C9B9,#F8C8C9,#F7C8D9,#F2C9DE,#EACAE0,#F4D521,#F4D527,#F5D531,#F5D53C,#F5D64B,#F6D659,#F7D768,#F7D777,#F9D887,#FAD997,#FAD9A8,#FBDABA,#FBDACA,#FADBDB,#FADAE8,#F2DBEA,#F5E627,#F5E62D,#F5E635,#F5E640,#F5E64D,#F5E65B,#F6E669,#F7E778,#F7E889,#F9E898,#F9E9A8,#FBEBBA,#FCEBCB,#FDEDDC,#FDEDED,#FBECF4,#EFEA3A,#F0EA3E,#F0EB44,#F0EB4D,#F1EC57,#F2ED64,#F2EE71,#F3EF7E,#F4F18D,#F6F29B,#F7F4AB,#F8F6BB,#FAF8CB,#FCFBDC,#FEFDEE,#FFFFFF';

    var cmyk = function() {
      var v4sub = function(a, b) {
        return [ a[0] - b[0], a[1] - b[1], a[2] - b[2], 0 ];
      };
      var v4tran = function(m, a) {
        return [
          m[0] * a[0] + m[1] * a[1] + m[2] * a[2] + m[3] * a[3],
          m[4] * a[0] + m[5] * a[1] + m[6] * a[2] + m[7] * a[3],
          m[8] * a[0] + m[9] * a[1] + m[10] * a[2] + m[11] * a[3],
          m[12] * a[0] + m[13] * a[1] + m[14] * a[2] + m[15] * a[3]
        ];
      };
      var v4inv = function(m) {
        var inv = [
          m[5] * m[10] * m[15] - m[5] * m[11] * m[14] - m[9] * m[6] * m[15] +
            m[9] * m[7] * m[14] + m[13] * m[6] * m[11] - m[13] * m[7] * m[10],
          -m[1] * m[10] * m[15] + m[1] * m[11] * m[14] + m[9] * m[2] * m[15] -
            m[9] * m[3] * m[14] - m[13] * m[2] * m[11] + m[13] * m[3] * m[10],
          m[1] * m[6] * m[15] - m[1] * m[7] * m[14] - m[5] * m[2] * m[15] +
            m[5] * m[3] * m[14] + m[13] * m[2] * m[7] - m[13] * m[3] * m[6],
          -m[1] * m[6] * m[11] + m[1] * m[7] * m[10] + m[5] * m[2] * m[11] -
            m[5] * m[3] * m[10] - m[9] * m[2] * m[7] + m[9] * m[3] * m[6],
          -m[4] * m[10] * m[15] + m[4] * m[11] * m[14] + m[8] * m[6] * m[15] -
            m[8] * m[7] * m[14] - m[12] * m[6] * m[11] + m[12] * m[7] * m[10],
          m[0] * m[10] * m[15] - m[0] * m[11] * m[14] - m[8] * m[2] * m[15] +
            m[8] * m[3] * m[14] + m[12] * m[2] * m[11] - m[12] * m[3] * m[10],
          -m[0] * m[6] * m[15] + m[0] * m[7] * m[14] + m[4] * m[2] * m[15] -
            m[4] * m[3] * m[14] - m[12] * m[2] * m[7] + m[12] * m[3] * m[6],
          m[0] * m[6] * m[11] - m[0] * m[7] * m[10] - m[4] * m[2] * m[11] +
            m[4] * m[3] * m[10] + m[8] * m[2] * m[7] - m[8] * m[3] * m[6],
          m[4] * m[9] * m[15] - m[4] * m[11] * m[13] - m[8] * m[5] * m[15] +
            m[8] * m[7] * m[13] + m[12] * m[5] * m[11] - m[12] * m[7] * m[9],
          -m[0] * m[9] * m[15] + m[0] * m[11] * m[13] + m[8] * m[1] * m[15] -
            m[8] * m[3] * m[13] - m[12] * m[1] * m[11] + m[12] * m[3] * m[9],
          m[0] * m[5] * m[15] - m[0] * m[7] * m[13] - m[4] * m[1] * m[15] +
            m[4] * m[3] * m[13] + m[12] * m[1] * m[7] - m[12] * m[3] * m[5],
          -m[0] * m[5] * m[11] + m[0] * m[7] * m[9] + m[4] * m[1] * m[11] -
            m[4] * m[3] * m[9] - m[8] * m[1] * m[7] + m[8] * m[3] * m[5],
          -m[4] * m[9] * m[14] + m[4] * m[10] * m[13] + m[8] * m[5] * m[14] -
            m[8] * m[6] * m[13] - m[12] * m[5] * m[10] + m[12] * m[6] * m[9],
          m[0] * m[9] * m[14] - m[0] * m[10] * m[13] - m[8] * m[1] * m[14] +
            m[8] * m[2] * m[13] + m[12] * m[1] * m[10] - m[12] * m[2] * m[9],
          -m[0] * m[5] * m[14] + m[0] * m[6] * m[13] + m[4] * m[1] * m[14] -
            m[4] * m[2] * m[13] - m[12] * m[1] * m[6] + m[12] * m[2] * m[5],
          m[0] * m[5] * m[10] - m[0] * m[6] * m[9] - m[4] * m[1] * m[10] +
            m[4] * m[2] * m[9] + m[8] * m[1] * m[6] - m[8] * m[2] * m[5]
        ];
        var det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
        for (var i = 0; i < inv.length; i += 1) {
          inv[i] /= det;
        }
        return inv;
      };
      var init = function() {
        rgbTable = rgb2cmyk.split(/,/g).map(function(color) {
          return hex2rgb(color);
        });
        if (rgbTable.length != 4096) {
          throw '!' + rgbTable.length;
        }
      };
      var get_rgb = function(r, g, b) {
        if (!rgbTable) {
          init();
        }
        return rgbTable[(r << 8) | (g << 4) | b];
      }
      var rgbTable = null;
      return {
        getNearestColor: function(r, g, b) {
          var near_fn = function(p0, vr, vg, vb, a) {
            return function() {
              a[0] = Math.max(0, Math.min(a[0], 1) );
              a[1] = Math.max(0, Math.min(a[1], 1) );
              a[2] = Math.max(0, Math.min(a[2], 1) );
              var nr = vr[0] * a[0] + vg[0] * a[1] + vb[0] * a[2] + p0[0];
              var ng = vr[1] * a[0] + vg[1] * a[1] + vb[1] * a[2] + p0[1];
              var nb = vr[2] * a[0] + vg[2] * a[1] + vb[2] * a[2] + p0[2];
              nr = Math.max(0, Math.min(Math.floor(nr), 255) );
              ng = Math.max(0, Math.min(Math.floor(ng), 255) );
              nb = Math.max(0, Math.min(Math.floor(nb), 255) );
              var d = (nr - r) * (nr - r) + (ng - g) * (ng - g) + (nb - b) * (nb - b);
              return { d: d, rgb: [ nr, ng, nb ] };
            };
          };
          var near = [];
          var vt = [0, 0, 0, 1];
          for (var ir = 1; ir < 16; ir += 1) {
            for (var ig = 1; ig < 16; ig += 1) {
              for (var ib = 1; ib < 16; ib += 1) {
                var p0 = get_rgb(ir, ig, ib);
                var vr = v4sub(get_rgb(ir, ig - 1, ib - 1), p0);
                var vg = v4sub(get_rgb(ir - 1, ig, ib - 1), p0);
                var vb = v4sub(get_rgb(ir - 1, ig - 1, ib), p0);
                var m = vr.concat(vg).concat(vb).concat(vt);
                var a = v4tran(v4inv(m), v4sub([r, g, b], p0) );
                if (0 <= a[0] && a[0] <= 1 &&
                    0 <= a[1] && a[0] <= 1 &&
                    0 <= a[2] && a[0] <= 1) {
                  return [r, g, b];
                }
                near.push(near_fn(p0, vr, vg, vb, a) );
              }
            }
          }
          var min = near[0]();
          for (var i = 1; i < near.length; i += 1) {
            var n = near[i]();
            if (min.d > n.d) {
              min = n;
            }
          }
          return min.rgb;
        }
      };
    }();
    //
    var unit2ff = function(v) { return Math.floor(v * 255); };
    var ff2unit = function(v) { return v / 255; };
    //
    var hsl2rgb = function(h, s, l) {
      h = h < 0 ? h % 360 + 360 : h % 360;
      var c = (1 - Math.abs(2 * l - 1) ) * s;
      var hh = h / 60;
      var x = c * (1 - Math.abs(hh % 2 - 1));
      var a = hh < 1 ? [c, x, 0] : hh < 2 ? [x, c, 0] :
        hh < 3 ? [0, c, x] : hh < 4 ? [0, x, c] :
        hh < 5 ? [x, 0, c] : [c, 0, x];
      var m = l - c / 2;
      a[0] = unit2ff(a[0] + m);
      a[1] = unit2ff(a[1] + m);
      a[2] = unit2ff(a[2] + m);
      return a;
    };
    var hsv2rgb = function(h, s, v) {
      h = h < 0 ? h % 360 + 360 : h % 360;
      var c = v * s;
      var hh = h / 60;
      var x = c * (1 - Math.abs(hh % 2 - 1));
      var a = hh < 1 ? [c, x, 0] : hh < 2 ? [x, c, 0] :
        hh < 3 ? [0, c, x] : hh < 4 ? [0, x, c] :
        hh < 5 ? [x, 0, c] : [c, 0, x];
      var m = v - c;
      a[0] = unit2ff(a[0] + m);
      a[1] = unit2ff(a[1] + m);
      a[2] = unit2ff(a[2] + m);
      return a;
    };
    var rgb2hslv = function(r, g, b, method) {
      r = ff2unit(r);
      g = ff2unit(g);
      b = ff2unit(b);
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var h = max == min? 0 : max == r?
          60 * (0 + (g - b) / (max - min) ) : max == g?
          60 * (2 + (b - r) / (max - min) ) :
          60 * (4 + (r - g) / (max - min) );
      if (h < 0) {
        h += 360;
      }
      var s;
      if (method == 'hsl') {
        s = max == 0? 0 : min == 1? 0 :
          (max - min) / (1 - Math.abs(max + min - 1) );
        var l = (max + min) / 2;
        return [h, s, l];
      } else if (method == 'hsv') {
        s = max == 0? 0 : (max - min) / max;
        var v = max;
        return [h, s, v];
      } else {
        return [0, 0, 0];
      }
    };
    var rgb2hsl = function(r, g, b) {
      return rgb2hslv(r, g, b, 'hsl');
    };
    var rgb2hsv = function(r, g, b) {
      return rgb2hslv(r, g, b, 'hsv');
    };
    var color2rgb = function() {
      var ctx = null;
      var cache = {};
      return function(color) {
        var rgb = cache[color];
        if (!rgb) {
          if (ctx == null) {
            ctx = document.createElement('canvas').getContext('2d');
            ctx.canvas.width = 1;
            ctx.canvas.height = 1;
          }
          ctx.fillStyle = color;
          ctx.fillRect(0, 0, 1, 1);
          var data = ctx.getImageData(0, 0, 1, 1).data;
          rgb = Object.freeze([ data[0], data[1], data[2], data[3] ]);
          cache[color] = rgb;
        }
        return rgb;
      };
    }();
    return {
      rgb2hex: rgb2hex, hex2rgb: hex2rgb,
      hsl2rgb: hsl2rgb, rgb2hsl: rgb2hsl,
      hsv2rgb: hsv2rgb, rgb2hsv: rgb2hsv,
      color2rgb: color2rgb,
      rad2hue: rad2hue, hue2rad: hue2rad,
      cmyk: cmyk
    };
  }();

  var components = {};

  components['resizable-border'] = {
    template: '<div></div>',
    props : {
      debug: { default: false },
      enable: { default: '' }
    },
    mounted: function() {
      var elms = [ this.$el ];
      for (var i = 0; i < 7; i += 1) {
        var elm = document.createElement('DIV');
        this.$el.parentNode.appendChild(elm);
        elms.push(elm);
      }
      // 4 0 5
      // 3   1
      // 7 2 6
      var box = '4px';
      var bdr = '2px';
      var bar = '100%';
      var edg = '-1px';
      var styles = [
        { width: bar, height: bdr, left: edg, top: edg, cursor: 'ns-resize' },
        { width: bdr, height: bar, right: edg, top: edg, cursor: 'ew-resize' },
        { width: bar, height: bdr, left: edg, bottom: edg, cursor: 'ns-resize' },
        { width: bdr, height: bar, left: edg, top: edg, cursor: 'ew-resize' },
        { width: box, height: box, left: edg, top: edg, cursor: 'nwse-resize' },
        { width: box, height: box, right: edg, top: edg, cursor: 'nesw-resize ' },
        { width: box, height: box, right: edg, bottom: edg, cursor: 'nwse-resize' },
        { width: box, height: box, left: edg, bottom: edg, cursor: 'nesw-resize ' }
      ];
      var dirs = [ 't', 'r', 'b', 'l', 'lt', 'rt', 'rb', 'lb' ];
      var opacity = this.debug? '0.5' : '0';
      var vm = this;
      var extend = Vue.util.extend;
      var enable = this.enable? this.enable.split(/[\s,]+/g) : null;
      elms.forEach(function(e, i) {
        extend(e.style, extend(styles[i], {
          position: 'absolute',
          backgroundColor: i < 4? 'red' : 'blue',
          opacity: opacity
        }) );
        if (enable && enable.indexOf(dirs[i]) == -1) {
          e.style.display = 'none';
        }
        $(e).on('mousedown', function(event) {
          var mousemoveHandler = function(event) {
            vm.$emit('resizemove', {
              dir: dirs[i],
              dx: event.pageX - dragPoint.x,
              dy: event.pageY - dragPoint.y
            });
          };
          var mouseupHandler = function(event) {
            $(document).off('mousemove', mousemoveHandler).
              off('mouseup', mouseupHandler);
            document.body.removeChild(block);
            vm.$emit('resizeend', { dir: dirs[i] });
          };
          //
          event.preventDefault();
          $(document).on('mousemove', mousemoveHandler).
            on('mouseup', mouseupHandler);
          var dragPoint = { x: event.pageX, y: event.pageY };
          var block = document.createElement('DIV');
          extend(block.style, {
            position: 'absolute',
            left: document.documentElement.scrollLeft + 'px',
            top: document.documentElement.scrollTop + 'px',
            width: '100%', height: '100%',
            backgroundColor: 'green',
            opacity: opacity,
            cursor: styles[i].cursor,
          });
          document.body.appendChild(block);
          vm.$emit('resizestart', { dir: dirs[i] });
        });
      });
    }
  };

  components['x-svg'] = {
    template: '<g v-html="svg"></g>',
    props: {
      svg: { default: '' },
      x: { default: 0 },
      y: { default: 0 },
      width: { default: 100 },
      height: { default: 100 }
    },
    watch: { layout: function() {} },
    computed: {
      layout: function() {
        this.$nextTick(function() {
          var svg = this.$el? this.$el.firstChild : null;
          if (svg) {
            [ 'x', 'y', 'width', 'height' ].
            forEach(function(p) {
              svg.setAttribute(p, '' + this[p]);
            }.bind(this) );
            this.$emit('load', { svg: svg });
          }
          return svg;
        });
        return [ this.svg, this.x, this.y, this.width, this.height ];
      }
    }
  };

  components['slider'] = {
    template: '<label>' +
      '<input ref="input" type="range" style="vertical-align:middle;width:100px;"' +
        ' :value="str(value)" :min="str(min)" :max="str(max)"' +
        ' @input="inputHandler" />' +
      '<span v-html="label" style="vertical-align:middle;"></span></label>',
    mounted: function() {
    },
    props: {
      min: { default: 0, type: Number },
      max: { default: 10, type: Number },
      value: { default: 5, type: Number },
      label: { default: '', type: String }
    },
    methods: {
      str: function(n) {
        return '' + n;
      },
      inputHandler: function() {
        this.$emit('input', +this.$refs.input.value);
      }
    }
  };

  components['qrcode'] = {
    template: '<image xmlns:xlink="http://www.w3.org/1999/xlink"' +
        ' style="image-rendering:pixelated;" :transform="transform"' +
        ' :width="imgSize" :height="imgSize" :xlink:href="url" />',
    props: {
      typeNumber: { default: 0 },
      errorCorrectionLevel: { default: 'L', type: String },
      data: { default: 'hi!', type: String },
      x: { default: 0, type: Number },
      y: { default: 0, type: Number },
      size: { default: 100, type: Number },
      pixels : { default: function() { return [ '#666' ] }, type: Array }
    },
    data: function() {
      return { url: '', imgSize: 0 };
    },
    watch: { qrcode: function() {} },
    computed: {
      qrcode: function() {
        var cacheMap = qrcode.$vueCacheMap ||
          (qrcode.$vueCacheMap = { stat: { callCount: 0, failCount: 0 } });
        var stat = cacheMap.stat;
        var qrDataKey = [this.typeNumber, this.errorCorrectionLevel,
                   this.pixels.join(','), '', this.data].join('\n');
        var qrData = cacheMap[qrDataKey];
        stat.callCount +=1;
        if (!qrData) {
          stat.failCount +=1;
          var qrKey = [this.typeNumber, this.errorCorrectionLevel,
            '', this.data].join('\n');
          var qr = cacheMap[qrKey];
          stat.callCount +=1;
          if (!qr) {
            stat.failCount +=1;
            // cache not found, create new
            qr = qrcode(this.typeNumber, this.errorCorrectionLevel);
            qr.addData(this.data);
            qr.make();
            cacheMap[qrKey] = qr;
          }
          var j = 0;
          var pixels = this.pixels;
          var moduleCount = qr.getModuleCount();
          var ctx = document.createElement('canvas').getContext('2d');
          ctx.canvas.width = ctx.canvas.height = moduleCount;
          var image = ctx.createImageData(moduleCount, moduleCount);
          var index = 0;
          // There are three position probe patterns
          // at fixed position and size.
          var posProbes = [
            { x: 2, y: 2, pixel: null },
            { x: moduleCount - 5, y: 2, pixel: null },
            { x: 2, y: moduleCount - 5, pixel: null }
          ];
          for (var r = 0; r < moduleCount; r += 1) {
            for (var c = 0; c < moduleCount; c += 1) {
              if (qr.isDark(r, c) ) {
                var pixel = pixels[j];
                j = (j + 1) % pixels.length;
                posProbes.forEach(function(pp) {
                  if (pp.x == c && pp.y == r) {
                    pp.pixel = pixel; // store left-top pixel
                  } else if (pp.x <= c && c < pp.x + 3 &&
                    pp.y <= r && r < pp.y + 3) {
                    pixel = pp.pixel; // use stored pixel
                  }
                });
                var rgbPixel = ColorUtil.color2rgb(pixel);
                image.data[index] = rgbPixel[0];
                image.data[index + 1] = rgbPixel[1];
                image.data[index + 2] = rgbPixel[2];
                image.data[index + 3] = rgbPixel[3];
              }
              index += 4;
            }
          }
          ctx.putImageData(image, 0, 0);
          // put to cache.
          qrData = cacheMap[qrDataKey] = {
            url: ctx.canvas.toDataURL(), imgSize: moduleCount };
        }
        this.url = qrData.url;
        this.imgSize = qrData.imgSize;
        return [ this.url, this.imgSize ];
      },
      transform: function() {
        if (this.imgSize == 0) {
          return '';
        }
        return 'translate(' + this.x + ' ' + this.y +
          ')scale(' + this.size / this.imgSize + ')';
      }
    }
  };

  components['color-circle'] = {
    template: '<canvas :width="size" :height="size"></canvas>',
    props: {
      size: { default: 100, type: Number },
      brightness: { default: 1, type: Number },
      overpaint: { default: 0, type: Number }
    },
    methods: {
      updateImage: function(
          canvas, size, brightness, overpaint) {
        var r = size / 2;
        var ctx = canvas.getContext('2d');
        var image = ctx.createImageData(size, size);
        var data = image.data;
        var i = 0;
        var PI2 = Math.PI * 2;
        var h = 0;
        var s = 1;
        var v = brightness;
        for (var y = 0; y < size; y += 1) {
          for (var x = 0; x < size; x += 1) {
            var px = x - r;
            var py = y - r;
            var pr = Math.sqrt(px * px + py * py);
            if (pr < r + overpaint) {
              var rad = Math.atan2(-py, px);
              //h = rad * 360 / PI2;
              h = ColorUtil.rad2hue(rad);
              s = Math.min(pr / r, 1);
              var rgb = ColorUtil.hsv2rgb(h, s, v);
              data[i] = rgb[0];
              data[i + 1] = rgb[1];
              data[i + 2] = rgb[2];
              data[i + 3] = 255;
            }
            i += 4;
          }
        }
        ctx.putImageData(image, 0, 0);
      }
    },
    watch: {
      render: function() {}
    },
    computed: {
      render: function() {
        if (this.$el) {
          this.updateImage(this.$el, this.size, this.brightness,
                           this.overpaint);
        }
        return [ this.size, this.brightness,
                this.overpaint ];
      }
    },
    mounted: function() {
      this.updateImage(this.$el, this.size, this.brightness,
                       this.overpaint);
    }
  };

  components['color-pointer'] = {
    template: '<canvas></canvas>',
    props: {
      width: { default: 50 },
      height: { default: 50 },
      add: { default: true },
      fill: { default: '#ccc' },
      shadow: { default: true }
    },
    watch: { render: function() {} },
    computed: {
      render: function() {
        if (!this.ctx) {
          return [ this.ctx ];
        }

        var ctx = this.ctx;
        ctx.canvas.width = this.width;
        ctx.canvas.height = this.height;

        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.save();

        ctx.scale(this.width, this.height);
        ctx.scale(1 / this.viewBox[2], 1 / this.viewBox[3]);
        ctx.translate(-this.viewBox[0], -this.viewBox[1]);

        ctx.fillStyle = 'rgba(255,0,0,0)';
        ctx.fillRect(this.viewBox[0], this.viewBox[1],
            this.viewBox[2], this.viewBox[3]);
        this.pointers.forEach(function(p, i) {

          if (!(this.shadow || (i == 1) ) ) {
            return;
          }
          ctx.fillStyle = this.fill;
          ctx.beginPath();
          ctx.arc(0, 0, 5, 0, Math.PI * 2);
          ctx.fill();

          ctx.lineCap = 'round';
          ctx.strokeStyle = p.color;
          ctx.lineWidth = p.width;
          ctx.beginPath();
          ctx.moveTo(0, -5.5);
          ctx.lineTo(0, -13);
          ctx.stroke();

          ctx.beginPath();
          ctx.arc(0, 0, 5, 0, Math.PI * 2);
          ctx.stroke();

          ctx.beginPath();
          ctx.moveTo(2, -9);
          ctx.lineTo(6, -9);
          ctx.stroke();

          if (this.add) {
            ctx.beginPath();
            ctx.moveTo(4, -7);
            ctx.lineTo(4, -11);
            ctx.stroke();
          }

        }.bind(this) );
        ctx.restore();

        return [ this.ctx, this.add, this.shadow, this.fill ];
      }
    },
    data: function() {
      return {
        ctx: null,
        viewBox: [-11.5, -16.5, 24, 24],
        pointers : [
          { color: '#fff', width: '3' },
          { color: '#000', width: '1' }
        ]
      };
    },
    mounted: function() {
      if (this.$el && typeof this.$el.getContext == 'function') {
        this.ctx = this.$el.getContext('2d');
      }
    }
  };

  components['color-picker'] = {
    template: '<div>' +
        '<div style="position:relative;display:inline-block;float:left;">' +
          '<color-pointer ref="addPointer" style="display:none;" fill="none"' +
          ' :width="24" :height="24" :add="true"></color-pointer>' +
          '<color-pointer ref="delPointer" style="display:none;" fill="none"' +
          ' :width="24" :height="24" :add="false"></color-pointer>' +
          '<color-circle :overpaint="2" :size="size" :style="{ margin: margin + \'px\' }"/>' +
          '<svg tabindex="0" ref="colorEditor"' +
          ' style="position:absolute;left:0px;top:0px;outline:none;"' +
          ' @mousedown="picker_mousedownHandler($event)"' +
          ' @mouseover="picker_mouseoverHandler($event)"' +
          ' @mouseout="picker_mouseoverHandler($event)"' +
            ' :width="size + margin * 2" :height="size + margin * 2"' +
            ' :viewBox.camel="viewBox">' +
            '<circle cx="0" cy="0" :r="size / 2 + 2"' +
            ' fill="none" stroke="white" stroke-width="4" />' +
            '<path v-for="c in colorMarkers" :d="pathLine(c.x, c.y)"' +
              ' fill="none" stroke="black"' +
              ' :stroke-dasharray="linked?\'\':\'2\'"' +
              ' :stroke-width="c.i == overIndex? 2 : 1" />' +
            '<g :style="colorMarkerStyle" v-for="c in colorMarkers"' +
              ' :transform="\'translate(\' + c.x + \' \' + c.y + \')\'"' +
              ' :x-color-marker-index="c.i">' +
              '<circle :r="c.r + (c.i == selectedIndex? 3 : 1)' +
              ' + (c.i == overIndex? 1 : 0)"' +
                ' fill="black" stroke="none"/>' +
              '<circle :r="c.r" :fill="colors[c.i]" stroke="white" />' +
            '</g>' +
          '</svg>' +
        '</div>' +
        '<div style="display:inline-block;float:left;">' +
          '<div tabindex="0" v-for="c in colorMarkers"' +
            ' style="display:inline-block;line-height:1;' +
              'border:1px solid #000;outline:none;"' +
            ' @click="setSelectedIndex(c.i)">' +
            '<div :style="colorChooserStyle(c)"></div>' +
          '</div>' +
          '<template v-for="(hs, i) in hsvSliders" >' +
            '<br/><label><input type="range"' +
              ' style="width:100px;vertical-align:middle;"' +
              ' min="0" :max="hs.max" :step="hs.step" :value="hs.value"' +
              ' @mousedown="hsv_mousedownHandler($event, i, 1)" />' +
            '<span style="vertical-align:middle;">' +
            '{{hs.label}} <input type="text" style="text-align:right;width:3rem;"' +
            ' :value="formatNumber(hs.value * hs.scale, 2)"' +
            ' @focus="$event.target.select()"' +
            ' @change="hsv_changeHandler($event, i, hs.scale)" />{{hs.unit}}' +
            '</span></label>' +
          '</template>' +
          '<br/><label><input type="checkbox" v-model="linked" />Linked</label>' +
          '<br/><div tabindex="0" v-for="(button, i) in buttonStates"' +
              ' style="margin-right:4px;line-height:1;position:relative;' +
                'display:inline-block;outline:none;"' +
              ' @mouseover="button_mouseHandler($event, i)"' +
              ' @mouseout="button_mouseHandler($event, i)"' +
              ' @mousedown="button_mouseHandler($event, i)"' +
              ' @click="button_mouseHandler($event, i)">' +
            '<color-pointer :width="24" :height="24"' +
              ' :add="i == 0" :shadow="false" fill="#ccc" ></color-pointer>' +
            '<svg style="position:absolute;left:0px;top:0px;"' +
              ' width="24" height="24" :viewBox.camel="\'0 0 16 16\'" >' +
              '<rect :opacity="buttonOverlay(i)? 0.2 : 0"' +
              ' fill="#0cf" stroke="#00c" x="0.5" y="0.5" width="15" height="15" />' +
            '</svg>' +
          '</div>' +
        '</div>' +
        '<br style="clear:both;"/>' +
      '</div>',
    props: {
      value: { default: ['#f00', '#0f0', '#00f'], type: Array },
      margin: { default: 16, type: Number },
      size: { default: 216, type: Number }
    },
    data: function() {
      return {
        linked: true,
        overIndex: -1,
        selectedIndex: 0,
        colorMarkers: [],
        buttonMode: '',
        buttonStates: [
          { down: false, over: false, mode: 'add' },
          { down: false, over: false, mode: 'del' }
        ]
      };
    },
    watch: {
      prepareMarkers: function() {},
      buttonMode: function(newVal) {
        this.$refs.colorEditor.style.cursor = newVal?
            this.getCursor(newVal == 'add') : '';
      }
    },
    computed: {
      colors: function() { return this.value; },
      hsvSliders: function() {
        var colorMarker = this.colorMarkers[this.selectedIndex];
        var values = colorMarker? colorMarker.hsv : [0, 0, 0];
        return [
          { label: 'H', max: '360', step: '0.01', scale: 1, unit: '°' },
          { label: 'S', max: '1', step: '0.01', scale: 100, unit: '%' },
          { label: 'V', max: '1', step: '0.01', scale: 100, unit: '%' },
        ].map(function(hs, i) {
          hs.value = values[i];
          return hs;
        });
      },
      viewBox: function() {
        var s = this.size / 2 + this.margin;
        return -s + ' ' + -s + ' ' + s * 2 + ' ' + s * 2;
      },
      prepareMarkers: function() {
        var r = this.size / 2;
        this.colorMarkers = this.colors.map(function(color, i) {
          var rgb = ColorUtil.hex2rgb(color);
          var hsv = ColorUtil.rgb2hsv.apply(null, rgb);
          var t = ColorUtil.hue2rad(hsv[0]);
          var x = Math.cos(t) * r * hsv[1];
          var y = -Math.sin(t) * r * hsv[1];
          return { i: i, x: x, y: y, r: i == 0? 10 : 6, hsv: hsv };
        }.bind(this) );
        return [ this.size, this.colors ];
      },
      colorMarkerStyle: function() {
        return this.buttonMode? {} : { cursor: 'move' };
      }
    },
    methods: {
      toCmykNearestColors: function(colors) {
        return colors.map(function(color) {
          var rgb = ColorUtil.cmyk.getNearestColor.
            apply(null, ColorUtil.hex2rgb(color) );
          return ColorUtil.rgb2hex.apply(null, rgb);
        });
      },
      getCursor: function(add) {
        var pointer =  add?
            this.$refs.addPointer : this.$refs.delPointer;
        var vb = pointer.viewBox;
        var x = -vb[0] / vb[2] * pointer.width;
        var y = -vb[1] / vb[3] * pointer.height;
        return 'url(' + pointer.$el.toDataURL() + ') ' +
          ~~x + ' ' + ~~y + ', auto';
      },
      formatNumber: function(v, digits) {
        var neg = v < 0;
        if (neg) {
          v = -v;
        }
        for (var i = 0; i < digits; i += 1) {
          v *= 10;
        }
        var s = '' + Math.round(v);
        while (s.length <= digits) {
          s = '0' + s;
        }
        if (digits > 0) {
          s = s.substring(0, s.length - digits) +
            '.' + s.substring(s.length - digits);
        }
        return neg? '-' + s : s;
      },
      pathLine: function(x, y) {
        return 'M0 0L' + x + ' ' + y;
      },
      buttonOverlay: function(i) {
        var state = this.buttonStates[i];
        if (this.buttonMode == state.mode || state.down) {
          return true;
        } else if (state.over) {
          return true;
        }
        return false;
      },
      button_mouseHandler: function(event, i) {
        var state = this.buttonStates[i];
        if (event.type == 'mouseover') {
          state.over = true;
        } else if (event.type == 'mouseout') {
          state.over = false;
        } else if (event.type == 'mousedown') {
          state.down = true;
          var mouseupHandler = function() {
            $(document).off('mouseup', mouseupHandler);
            state.down = false;
          };
          $(document).on('mouseup', mouseupHandler);
        } else if (event.type == 'click') {
          this.buttonMode = this.buttonMode != state.mode? state.mode: '';
        }
      },
      hsv_mousedownHandler: function(event, hsvIndex, scale) {
        var targetMarker = this.colorMarkers[this.selectedIndex];
        if (!targetMarker) {
          return;
        }
        var editor = this.hsvEditor(targetMarker.i);
        var target = event.target;
        var mousemoveHandler = function(event) {
          var value = +target.value / scale;
          var hsv = targetMarker.hsv.slice();
          if (!isNaN(value) ) {
            hsv[0] = hsvIndex == 0? value : hsv[0];
            hsv[1] = hsvIndex == 1? value : hsv[1];
            hsv[2] = hsvIndex == 2? value : hsv[2];
          }
          var colors = editor.getColors(
              ColorUtil.hue2rad(hsv[0]), hsv[1], hsv[2]);
          this.$emit('input', colors);
        }.bind(this);
        var mouseupHandler = function(event) {
          $(document).off('mousemove', mousemoveHandler).
            off('mouseup', mouseupHandler);
        }.bind(this);
        $(document).on('mousemove', mousemoveHandler).
          on('mouseup', mouseupHandler);
      },
      hsv_changeHandler: function(event, hsvIndex, scale) {
        var targetMarker = this.colorMarkers[this.selectedIndex];
        if (!targetMarker) {
          return;
        }
        var editor = this.hsvEditor(targetMarker.i);
        var value = +event.target.value / scale;
        var hsv = targetMarker.hsv.slice();
        if (!isNaN(value) ) {
          hsv[0] = hsvIndex == 0? value : hsv[0];
          hsv[1] = hsvIndex == 1? value : hsv[1];
          hsv[2] = hsvIndex == 2? value : hsv[2];
        }
        var colors = editor.getColors(
            ColorUtil.hue2rad(hsv[0]), hsv[1], hsv[2]);
        this.$emit('input', colors);
      },
      picker_mouseoverHandler: function(event) {
        var $el = this.closest(function(elm) {
          return elm.getAttribute('x-color-marker-index') != null;
        }, event);
        if (!$el) {
          return;
        }
        event.preventDefault();
        var targetIndex = +$el.getAttribute('x-color-marker-index');
        this.overIndex = event.type == 'mouseover'? targetIndex : -1;
      },
      picker_mousedownHandler: function(event) {
        var $el = this.closest(function(elm) {
          return elm.getAttribute('x-color-marker-index') != null;
        }, event);
        if (this.buttonMode == 'add') {
          this.picker_mousedownHandler_add_marker(event);
        } else if (this.buttonMode == 'del') {
          if ($el) {
            this.picker_mousedownHandler_del_marker(event, $el);
          }
        } else {
          if ($el) {
            this.picker_mousedownHandler_move_marker(event, $el);
          }
        }
      },
      picker_mousedownHandler_add_marker: function(event) {
        event.preventDefault();
        var r = this.size / 2;
        var x = event.offsetX - r - this.margin;
        var y = event.offsetY - r - this.margin;
        var s = Math.sqrt(x * x + y * y) / r;
        var h = ColorUtil.rad2hue(Math.atan2(-y, x) );
        if (s > 1) {
          return;
        }
        var color = ColorUtil.rgb2hex.apply(null,
            ColorUtil.hsv2rgb(h, s, 1) );
        var colors = this.colors.slice();
        colors.push(color);
        this.buttonMode = '';
        this.selectedIndex = colors.length - 1;
        this.$emit('input', colors);
      },
      picker_mousedownHandler_del_marker: function(event, $el) {
        event.preventDefault();
        var targetIndex = +$el.getAttribute('x-color-marker-index');
        var colors = [];
        this.colors.forEach(function(color, i) {
          if (targetIndex != i) {
            colors.push(color);
          }
        }.bind(this) );
        this.buttonMode = '';
        this.selectedIndex = 0;
        this.$emit('input', colors);
      },
      picker_mousedownHandler_move_marker: function(event, $el) {

        var mousemoveHandler = function(event) {
          var deltaX = event.pageX - dragPoint.x;
          var deltaY = event.pageY - dragPoint.y;
          var x = lastPos.x + deltaX;
          var y = lastPos.y + deltaY;
          var r = this.size / 2;
          var t = Math.atan2(-y, x);
          var s = Math.sqrt(x * x + y * y) / r;
          if (s > 1) {
            s = 1;
          }
          var colors = editor.getColors(t, s, targetMarker.hsv[2]);
          this.$emit('input', colors);
        }.bind(this);

        var mouseupandler = function(event) {
          $(document).off('mousemove', mousemoveHandler).
            off('mouseup', mouseupandler);
        }.bind(this);

        event.preventDefault();
        var targetIndex = +$el.getAttribute('x-color-marker-index');
        this.setSelectedIndex(targetIndex);
        var editor = this.hsvEditor(targetIndex);
        var targetMarker = this.colorMarkers[targetIndex];
        var lastPos = { x: targetMarker.x, y: targetMarker.y };
        var dragPoint = { x: event.pageX, y: event.pageY };
        $(document).on('mousemove', mousemoveHandler).
          on('mouseup', mouseupandler);
      },
      hsvEditor : function(targetIndex) {
        var colorMarkers = this.colorMarkers.slice();
        return {
          getColors: function(t, s, v) {
            var dr = t - ColorUtil.hue2rad(colorMarkers[targetIndex].hsv[0]);
            var ds = s / colorMarkers[targetIndex].hsv[1]; // ratio
            var dv = v / colorMarkers[targetIndex].hsv[2]; // ratio
            var colors = this.colors.slice();
            colors.forEach(function(_, i) {
              if (i == targetIndex || this.linked) {
                var hsv = colorMarkers[i].hsv.slice();
                hsv[0] = ColorUtil.rad2hue(ColorUtil.hue2rad(hsv[0]) + dr);
                if (i == targetIndex) {
                  hsv[1] = s;
                  hsv[2] = v;
                } else if (this.linked && targetIndex == 0) {
                  hsv[1] = Math.min(hsv[1] * ds, 1);
                  hsv[2] = Math.min(hsv[2] * dv, 1);
                }
                colors[i] = ColorUtil.rgb2hex.apply(null,
                    ColorUtil.hsv2rgb.apply(null, hsv) );
              }
            }.bind(this) );
            return colors;
          }.bind(this)
        };
      },
      closest: function(fn, event, root) {
        if (!root) {
          root = event.currentTarget;
        }
        var elm = event.target;
        while (elm != null && elm != root) {
          if (fn(elm) ) {
            return elm;
          }
          elm = elm.parentNode;
        }
        return null;
      },
      setSelectedIndex: function(i) {
        this.selectedIndex = i;
      },
      colorChooserStyle: function(c) {
        return {
          backgroundColor: this.colors[c.i],
          width: '16px',
          height: '16px',
          borderStyle: 'solid',
          borderWidth: '1px',
          borderColor: c.i == this.selectedIndex? 'white' : 'black',
          verticalAlign: 'top',
          display: 'inline-block'
        };
      }
    }
  };

  !function() {
    for (var k in components) {
      Vue.component(k, components[k]);
    }
  }();

}();
