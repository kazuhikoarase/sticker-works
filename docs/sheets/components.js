// reusable components for Vue.js

'use strict';

!function() {

  var $ = function(e) {
    return {
      on: function(t, l) { e.addEventListener(t, l); return this; },
      off: function(t, l) { e.removeEventListener(t, l); return this; }
    };
  };

  var closest = function(fn, event, root) {
    if (!root) {
      root = event.currentTarget;
    }
    var elm = event.target;
    while (elm != null && elm != root) {
      if (fn(elm) ) {
        return elm;
      }
      elm = elm.parentNode;
    }
    return null;
  };

  var ColorUtil = function() {
    // https://en.wikipedia.org/wiki/HSL_and_HSV
    var HEX = '0123456789abcdef';
    var hex3Re = /^#[0-9a-f]{3}$/;
    var hex6Re = /^#[0-9a-f]{6}$/;
    var val2hex = function(v) {
      return HEX.charAt( (v >> 4) & 0x0f) + HEX.charAt(v & 0x0f);
    };
    var rgb2hex = function(r, g, b) {
      return '#' + val2hex(r) + val2hex(g) + val2hex(b);
    };
    var hex2val = function(hex, h, l) {
      return HEX.indexOf(hex.charAt(h) ) << 4 |
        HEX.indexOf(hex.charAt(l) );
    };
    var hex2rgb = function(hex) {
      if (typeof hex == 'string') {
        hex = hex.toLowerCase();
        if (hex.match(hex3Re) ) {
          return [ hex2val(hex, 1, 1), hex2val(hex, 2, 2), hex2val(hex, 3, 3) ];
        } else if (hex.match(hex6Re) ) {
          return [ hex2val(hex, 1, 2), hex2val(hex, 3, 4), hex2val(hex, 5, 6) ];
        }
      }
      return [0, 0, 0];
    }
    var rad2hueCoords = [
      [0, 0],
      [0.453, 15],
      [0.895, 30],
      [1.472, 45],
      [2.080, 60],
      [2.493, 90],
      [2.912, 120],
      [3.295, 150],
      [3.644, 180],
      [3.995, 210],
      [4.485, 240],
      [5.115, 270],
      [5.531, 300],
      [5.899, 330],
      [Math.PI * 2, 360]
    ];
 
    var coordsFunc = function(coords, src, dst) {
      var lastCoords = coords[coords.length - 1];
      return function(value) {
        value = value % lastCoords[src];
        if (value < 0) {
          value += lastCoords[src];
        }
        for (var i = 1; i < coords.length; i += 1) {
          var c1 = coords[i - 1];
          var c2 = coords[i];
          if (c1[src] <= value && value < c2[src]) {
            return (value - c1[src]) / (c2[src] - c1[src]) *
              (c2[dst] - c1[dst]) + c1[dst];
          }
        }
        return 0;
      };
    };
    var rad2hue = coordsFunc(rad2hueCoords, 0, 1);
    var hue2rad = coordsFunc(rad2hueCoords, 1, 0);
    //
    var rgb2cmyk = '#000000,#090A12,#0C0D1F,#0A0D2F,#0B0D40,#18144E,#1F1C5A,#242467,#272A73,#2A2E7E,#293289,#273794,#223E99,#2E449C,#314A9F,#334EA2,#0B150C,#061212,#08131F,#031331,#101341,#1A1B4F,#21215C,#252768,#292D75,#2A3181,#2A348B,#263996,#23409A,#2E469D,#324BA0,#344FA2,#112413,#052213,#022021,#002132,#092142,#182451,#202A5E,#252E6B,#283277,#293483,#28378E,#243C97,#27429B,#30489E,#334DA1,#3551A3,#173218,#0F3218,#003221,#003232,#003243,#0B3253,#1B3461,#22376E,#25397B,#253B87,#243D92,#1E419A,#2A479E,#314CA0,#3450A3,#3754A5,#1C431D,#15431E,#004321,#004332,#004343,#004353,#004263,#144272,#1B447F,#1D448C,#1A4599,#1C489F,#2B4EA1,#3151A4,#3555A6,#3858A7,#1F5328,#165329,#06532A,#005332,#005343,#015353,#035363,#005373,#025283,#075290,#07529E,#1754A5,#2857A7,#3159A9,#365BAA,#3A5EAB,#116332,#0E6332,#096332,#036433,#006343,#006453,#006464,#026373,#066383,#0A6292,#0962A0,#0F62AE,#2562AF,#3064AF,#3864AF,#3C65B0,#13733A,#11733A,#12733A,#0D733A,#077343,#057353,#077463,#057473,#0A7383,#0C7393,#0E72A1,#1072B0,#1B71B9,#2F70B8,#386FB7,#3E6FB6,#1B8340,#1A8340,#178340,#158341,#0F8343,#0B8353,#0F8363,#098473,#0D8383,#108393,#1182A2,#1582B1,#1881BF,#2680C4,#377DC1,#407BBF,#1D9345,#1E9345,#1E9345,#1E9246,#1C9346,#159354,#139364,#139373,#119383,#119393,#1292A2,#1692B1,#1892C0,#1C91CE,#2F8FCE,#428BCA,#22A249,#22A249,#22A249,#22A249,#1EA249,#1CA254,#1CA264,#16A373,#16A383,#18A393,#16A3A3,#1BA2B2,#1CA1C1,#1FA1D0,#28A1DB,#419ED8,#27B24A,#27B14A,#27B14A,#27B14A,#26B14A,#24B256,#25B265,#21B274,#22B284,#1CB293,#1CB2A2,#1FB2B2,#1CB1C1,#23B1D0,#27B1DF,#3AB0E5,#40B549,#41B649,#42B649,#43B649,#43B64D,#42B659,#41B766,#3FB873,#3DB982,#39BA91,#37BBA0,#32BCAF,#30BEBF,#2CC0CF,#2BC2E0,#32C1EE,#53B847,#53B847,#54B947,#55B947,#55B94B,#54BA59,#53BA65,#52BB72,#50BC80,#50BD8E,#4FBE9C,#4DBFAA,#4CC1B9,#4BC3C7,#4CC5D7,#4DC7E6,#60BB46,#60BB46,#61BB46,#62BB46,#63BC49,#62BC55,#62BD63,#61BE70,#61BF7D,#60C08A,#61C198,#60C3A6,#60C4B4,#61C6C2,#60C7D0,#63CADE,#6CBE44,#6CBE44,#6CBE44,#6DBE44,#6FBE44,#70BF4F,#6FC05E,#70C16C,#70C27A,#6FC388,#70C495,#6FC5A3,#70C7B1,#70C9BE,#70CACB,#72CDD9,#110708,#120A13,#140C1F,#140B30,#130A41,#1A134F,#211B5C,#272369,#292874,#2C2C7F,#2B318A,#283794,#273E99,#32449C,#344A9F,#354EA2,#14140B,#101110,#111020,#0E1032,#151142,#1E1950,#24205D,#272669,#2B2B76,#2B2F82,#2B328B,#273896,#2A409A,#32469D,#354BA0,#364FA2,#182412,#122213,#0F2021,#0E2132,#0F2142,#1C2352,#24285F,#282C6C,#2A3078,#2B3384,#2A3590,#253B97,#2C429B,#33489E,#364DA1,#3751A3,#1C3217,#173218,#0F3221,#0F3232,#0F3243,#103253,#1D3362,#24366F,#27387C,#273A88,#253B94,#25419A,#2D479E,#344CA0,#3650A3,#3954A5,#21431D,#1C431D,#114321,#104332,#0E4343,#104353,#0F4364,#144272,#1C4380,#1E438D,#1B449A,#24489F,#2F4EA1,#3451A3,#3855A5,#3A58A7,#245328,#1F5328,#135329,#0F5432,#115443,#105353,#125363,#115373,#115283,#155290,#14529E,#1F54A5,#2C57A7,#3459A8,#385BAA,#3C5EAB,#196432,#186332,#166332,#136432,#116443,#126453,#116464,#116374,#156383,#166292,#1562A0,#1962AE,#2A62AF,#3363AF,#3A64AF,#3E65B0,#1C743A,#1B733A,#1B733A,#18733A,#157343,#137353,#147463,#147473,#167383,#187393,#1972A2,#1A72B0,#2271B9,#3270B8,#3B6FB7,#406FB6,#218340,#208340,#1F8340,#1E8341,#1B8343,#188353,#1A8363,#178473,#178383,#198393,#1A82A2,#1D82B1,#1F81BF,#2B80C3,#3A7DC0,#427BBE,#239345,#249345,#249345,#249345,#209346,#1C9354,#1C9364,#1B9373,#1A9383,#1B9393,#1C93A2,#1F92B1,#2092C0,#2391CF,#338FCE,#448BCA,#28A248,#28A248,#29A248,#27A249,#23A249,#23A254,#22A264,#1EA374,#1EA383,#1FA393,#1EA3A3,#21A2B2,#22A2C1,#25A1D0,#2DA1DB,#449ED8,#2DB24A,#2DB14A,#2DB14A,#2CB14A,#2BB14A,#2BB256,#2AB265,#27B274,#27B284,#23B293,#23B2A3,#25B2B2,#23B1C1,#27B1D0,#2CB1DF,#3DB0E4,#42B649,#43B649,#44B649,#45B649,#45B64D,#44B759,#44B766,#42B873,#3FB982,#3CBA91,#39BBA0,#35BDAF,#33BEBF,#2FC0D0,#2FC2E0,#36C1EE,#54B947,#55B947,#55B947,#56B947,#57B94B,#55BA59,#55BA65,#53BB72,#52BC80,#52BD8E,#50BE9C,#50C0AA,#4EC1B9,#4DC3C8,#4EC5D7,#4FC7E6,#62BB46,#62BB46,#62BC46,#63BC45,#64BC49,#64BD56,#63BD63,#62BE70,#63BF7D,#62C08B,#62C298,#62C3A6,#62C4B4,#62C6C3,#62C8D0,#65CADE,#6DBE44,#6DBE44,#6DBE44,#6EBE44,#70BF44,#71BF4F,#71C05E,#71C16C,#71C27A,#71C388,#71C495,#70C6A3,#71C7B1,#72C9BE,#71CBCC,#73CDD9,#200B0C,#1F0B14,#1E0E1F,#210B30,#210942,#221551,#261D5E,#28246B,#2B2876,#2D2C82,#2D2E8B,#2F3695,#313E99,#37449C,#394A9F,#3A4EA1,#22150A,#211010,#201121,#211032,#1F1142,#201A53,#262260,#29266C,#2C2B78,#2D2D84,#2D2F8D,#2E3795,#343F99,#37469D,#394BA0,#3B4FA2,#232411,#212112,#212021,#212132,#202142,#202152,#282561,#2C2A6E,#2D2D7A,#2E3086,#2B3392,#2F3B97,#34429B,#38489E,#3A4DA1,#3B51A3,#263216,#243216,#213221,#213232,#213243,#213253,#203263,#273371,#2A357E,#29378B,#263A96,#2F419A,#34479E,#394CA0,#3B50A3,#3D54A5,#2A431C,#26431C,#214321,#214332,#224343,#214353,#214363,#214273,#214281,#21428F,#22439B,#2D489E,#354EA1,#3951A3,#3C55A5,#3E58A7,#2B5327,#285327,#235328,#225432,#225443,#225353,#235364,#225374,#225383,#235291,#22529F,#2854A5,#3357A7,#3959A8,#3D5BA9,#405DAB,#256431,#256431,#256331,#236432,#226443,#236453,#226464,#226374,#236383,#246292,#2462A0,#2562AE,#3162AE,#3963AF,#3E64AF,#4265AF,#287439,#287339,#287439,#267339,#247343,#247453,#237464,#247474,#247383,#257393,#2672A2,#2772B0,#2C71B9,#3870B7,#3F6FB6,#436EB6,#2A833F,#2A833F,#2A8340,#2A8440,#278443,#258453,#258463,#258474,#258484,#268393,#2683A2,#2982B1,#2A81BF,#3280C3,#3F7DC0,#457BBE,#2D9344,#2D9344,#2D9345,#2B9345,#299345,#279354,#279364,#279373,#259383,#279393,#2893A2,#2A92B2,#2B92C0,#2C91CF,#3A90CE,#498BCA,#31A248,#31A248,#30A248,#2FA248,#2EA248,#2EA254,#2BA264,#29A374,#29A384,#29A393,#29A3A3,#2BA3B2,#2CA2C1,#2EA1D0,#34A1DA,#489FD7,#34B14A,#34B14A,#34B14A,#33B14A,#34B14A,#33B156,#31B265,#31B274,#2EB284,#2EB393,#2DB2A3,#2DB2B2,#2EB2C1,#30B2D0,#34B2DF,#43B0E4,#46B649,#47B648,#48B648,#49B748,#4AB74D,#49B759,#47B866,#46B974,#43BA82,#42BB91,#3EBCA0,#3BBDB0,#38BFC0,#35C1D0,#38C2E0,#3DC2EF,#58B947,#58B947,#58B947,#59BA47,#5ABA4B,#58BA59,#57BB65,#56BC72,#55BD80,#56BE8E,#53BF9C,#53C1AA,#51C2B9,#51C4C8,#52C6D7,#52C8E7,#64BC45,#64BC45,#65BC45,#66BC45,#66BD49,#66BD56,#65BE64,#65BF70,#65C07D,#64C18B,#65C299,#65C4A7,#64C5B4,#65C7C3,#64C8D1,#68CBDF,#6FBE44,#6FBE44,#70BF44,#71BF44,#72BF43,#73C050,#73C15F,#72C16D,#73C37A,#73C488,#73C595,#73C6A3,#73C8B1,#74CABF,#73CBCC,#75CDD9,#2E0E0F,#2D0D16,#2C0E20,#310931,#310943,#321652,#331E60,#34246C,#352979,#362D84,#362E8E,#3B3594,#3D3E99,#3E449C,#404A9F,#404EA1,#301309,#321011,#311021,#320F32,#321042,#301A53,#322261,#34276E,#342B7B,#332D86,#362F91,#3A3795,#3D3F99,#3F469D,#414B9F,#404FA2,#302310,#322111,#322020,#322132,#312142,#312153,#302563,#302B71,#322D7D,#332F8A,#353192,#3A3B97,#3D439B,#3F489E,#404DA1,#4051A3,#333314,#323315,#323221,#323232,#323243,#323253,#313263,#303272,#2F3280,#2F348D,#343896,#3A419A,#3C479D,#404CA0,#4150A2,#4354A4,#36431B,#34431B,#334322,#324332,#324343,#324354,#324364,#314273,#314282,#314290,#32449C,#38499E,#3E4DA1,#4051A3,#4255A5,#4458A7,#375426,#355426,#335427,#325432,#325443,#325454,#325464,#325374,#325383,#325291,#32529F,#3654A5,#3C57A6,#4159A8,#435BA9,#455DAA,#346430,#346430,#336430,#326432,#326443,#336454,#326464,#336474,#336384,#336292,#3362A0,#3462AE,#3B62AE,#4163AE,#4464AF,#4765AF,#357438,#357438,#347438,#347438,#337443,#327453,#327464,#337474,#337484,#347393,#3573A2,#3572B0,#3971B8,#4170B7,#466FB6,#486EB5,#37843E,#37843E,#37843F,#36843F,#358444,#338454,#358464,#348474,#338484,#358393,#3583A3,#3782B2,#3782BF,#3D81C3,#467DC0,#4C7BBE,#389344,#389344,#389344,#379344,#369344,#359354,#359464,#349473,#359483,#349494,#3693A3,#3792B2,#3892C0,#3991CF,#4490CD,#508CCA,#3BA347,#3BA347,#3CA247,#3BA247,#39A248,#38A355,#37A364,#37A374,#36A484,#36A393,#38A3A3,#38A3B3,#38A2C1,#3AA2D0,#40A1DA,#509FD7,#3FB249,#3FB249,#3FB249,#3FB149,#3FB149,#3DB256,#3DB265,#3CB274,#3AB284,#3AB393,#3AB3A3,#39B3B2,#3BB2C2,#3CB2D1,#3FB2E0,#4CB0E4,#4DB748,#4DB748,#4EB748,#4FB848,#50B84C,#4EB858,#4EB966,#4CBA74,#4ABB83,#48BC92,#45BDA1,#43BFB0,#40C0C0,#3DC2D1,#42C2E0,#45C2F0,#5CBA46,#5CBA46,#5DBA46,#5EBB46,#5EBB4C,#5DBB5A,#5DBC65,#5CBD73,#5BBE80,#5ABF8E,#59C09D,#58C2AB,#56C3BA,#57C5C9,#57C7D8,#57C9E8,#68BD45,#68BD45,#69BD45,#6ABD45,#6ABE4A,#6ABE56,#69BF64,#68BF70,#69C17E,#69C28C,#69C399,#69C4A7,#68C6B5,#68C8C3,#68C9D1,#6BCCE0,#73BF43,#73BF43,#74BF43,#75C043,#76C043,#77C150,#76C15F,#76C26D,#76C37B,#76C588,#76C696,#77C7A4,#76C9B2,#77CBBF,#77CCCD,#77CEDA,#3D0F11,#3D0E18,#3E0D23,#410531,#420A43,#411652,#421E60,#42246D,#43297A,#422C85,#442E90,#453594,#463E99,#48449C,#484A9F,#484EA1,#41140A,#421112,#431121,#430F32,#430F42,#411A53,#412162,#42276F,#422B7B,#422D87,#432E91,#453795,#474099,#47469D,#494B9F,#484FA2,#41240D,#432110,#432121,#432132,#432142,#422053,#412463,#412A72,#412D7E,#412F8C,#443092,#463B97,#46439B,#48489E,#494DA0,#4851A3,#423412,#433312,#433221,#443232,#433243,#423253,#423263,#413273,#403181,#40338E,#423896,#45419A,#47479D,#4A4CA0,#4950A2,#4954A4,#44441A,#43441A,#434321,#444333,#434343,#434354,#434364,#424273,#414282,#404290,#41449C,#45499E,#484DA1,#4952A3,#4A55A5,#4B58A7,#455425,#445425,#435425,#435433,#435443,#435454,#435464,#425374,#425383,#425291,#40529F,#4454A4,#4757A6,#4A59A8,#4A5BA9,#4C5DAA,#44642E,#44642E,#43642E,#436432,#436443,#436554,#436464,#436474,#436384,#436393,#4362A1,#4362AE,#4762AE,#4A63AE,#4D64AE,#4D64AF,#447436,#447436,#437436,#437437,#437443,#437454,#437564,#437575,#437484,#437394,#4473A2,#4472B0,#4772B8,#4B70B6,#4D6FB5,#4F6DB5,#45843D,#45843D,#45843D,#44843D,#448443,#438454,#448564,#448474,#438484,#438494,#4483A3,#4583B2,#4582C0,#4A81C2,#507DBF,#547BBE,#459443,#469443,#469443,#469443,#459444,#449454,#449464,#449474,#449484,#449494,#4693A3,#4693B2,#4792C1,#4791CE,#5091CD,#598DCA,#48A346,#48A346,#48A346,#47A346,#46A347,#47A355,#47A364,#46A474,#45A484,#46A494,#45A4A3,#46A3B3,#46A2C2,#49A2D0,#4EA1D9,#599FD7,#4BB248,#4BB248,#4BB248,#4BB248,#4CB248,#4BB255,#49B265,#48B274,#47B384,#47B394,#47B3A3,#47B3B3,#47B3C2,#49B2D1,#4BB2E0,#57B1E3,#55B947,#55B947,#56B947,#57B947,#58BA4C,#57BA58,#55BB66,#54BB75,#52BC83,#50BD92,#4FBFA2,#4DC0B1,#4AC2C2,#4BC2D1,#4DC2E1,#51C2F0,#63BC46,#63BC45,#64BC45,#65BC45,#65BC4D,#64BD5A,#63BD66,#62BE73,#62BF81,#61C08F,#60C29E,#5FC3AB,#5EC4BB,#5EC6CA,#5EC8DA,#5ECAEA,#6DBE44,#6EBE44,#6EBE44,#6FBE44,#6FBF4A,#6FBF57,#6FC064,#6EC171,#6FC27E,#6EC38C,#6FC49A,#6EC6A8,#6EC7B6,#6DC9C4,#6FCBD2,#70CDE1,#78C143,#78C143,#79C142,#7AC142,#7BC143,#7BC251,#7AC35F,#7AC46E,#7BC57C,#7BC689,#7BC797,#7BC9A5,#7BCAB3,#7BCCC0,#7CCECE,#7CCFDB,#500C0E,#510B17,#510823,#520332,#520C43,#511753,#501F61,#50256E,#51297A,#502C87,#502D90,#523594,#513E99,#51449C,#504A9F,#4F4EA1,#521409,#531111,#531021,#531032,#531042,#521953,#512162,#512770,#512A7C,#502C89,#512D91,#523795,#514099,#51469C,#514B9F,#504FA1,#52240B,#532110,#542121,#542132,#542143,#532053,#522362,#512972,#502C7F,#502D8B,#523092,#523B97,#52429B,#51489E,#514DA0,#5151A2,#52340F,#543210,#543221,#543232,#543243,#533253,#523263,#523273,#523181,#51328E,#513996,#52419A,#52479D,#524CA0,#5250A2,#5154A4,#534419,#544418,#544321,#544333,#544343,#544354,#534364,#524273,#514282,#514291,#51449B,#52499E,#534EA1,#5352A3,#5355A5,#5258A7,#545523,#545523,#545423,#545433,#545544,#555555,#545465,#535374,#525384,#515292,#51529F,#5354A4,#5357A6,#5459A7,#545BA9,#545DAA,#53652C,#53652C,#54642C,#556532,#546543,#546554,#546565,#546575,#536484,#536393,#5263A2,#5262AD,#5562AD,#5563AE,#5664AE,#5564AE,#537535,#547535,#547534,#547434,#547544,#547554,#547564,#547575,#547485,#547494,#5373A3,#5373B1,#5572B7,#5770B6,#576EB5,#576DB4,#54843B,#54843B,#54843B,#54843B,#548443,#548554,#558565,#548575,#548585,#548494,#5484A3,#5483B2,#5482C0,#5881C1,#5C7FBF,#5D7CBE,#559441,#559441,#559441,#559441,#559444,#559454,#549464,#549474,#549584,#559494,#5594A4,#5593B3,#5693C1,#5793CE,#5D91CC,#638EC9,#56A345,#56A345,#56A345,#56A345,#56A446,#56A455,#55A464,#55A475,#55A484,#55A594,#54A4A4,#55A4B3,#55A3C2,#57A3D1,#5CA2D8,#64A0D6,#59B246,#59B347,#58B347,#58B247,#58B247,#57B356,#57B365,#57B374,#56B484,#56B494,#56B4A4,#55B4B3,#56B3C2,#58B3D2,#59B3E1,#64B1E2,#5FBB46,#60BB46,#60BB46,#60BB46,#61BB4C,#60BC58,#60BD67,#5EBE75,#5CBE84,#5BC093,#5AC1A3,#58C2B3,#58C3C3,#59C3D2,#5BC3E2,#5FC3EF,#6CBE44,#6CBE44,#6CBE44,#6DBE45,#6CBE4E,#6BBF5A,#6BBF66,#6AC074,#6AC182,#6AC290,#68C39F,#68C5AD,#67C6BC,#67C8CC,#67CADC,#67CCEB,#74C043,#75C043,#75C043,#76C043,#76C04A,#76C158,#76C265,#75C372,#76C47F,#76C58D,#75C69B,#76C8A9,#75C9B7,#75CBC6,#76CDD4,#77CFE2,#7EC242,#7EC241,#7FC241,#7FC341,#80C344,#81C451,#80C460,#80C56F,#80C67D,#81C88A,#80C998,#81CAA6,#81CCB3,#82CEC1,#81CFCF,#82D1DC,#62090A,#620513,#630422,#630632,#620F43,#611853,#601F61,#5F256F,#5F297B,#5E2B87,#5E2C90,#5E3594,#5D3E98,#5B459B,#5A4A9E,#594EA1,#631509,#641011,#640F21,#640F31,#631042,#621953,#612062,#602670,#5F2A7D,#5E2C89,#5F2D91,#5E3795,#5D4099,#5C469C,#5A4B9F,#594FA1,#62240C,#642110,#642121,#632132,#642143,#642052,#632162,#612872,#602B80,#602C8C,#603192,#5F3B97,#5D439A,#5C489D,#5B4DA0,#5951A2,#633411,#643211,#643221,#643232,#643243,#643253,#633263,#623273,#613281,#60328F,#603896,#5F419A,#5E479D,#5C4CA0,#5B50A2,#5A54A4,#634419,#644418,#654321,#654332,#654343,#644354,#644364,#634273,#624282,#614391,#61439B,#60499E,#5E4EA0,#5D52A3,#5C55A4,#5B58A6,#645522,#645422,#655422,#655433,#655444,#665454,#645465,#645475,#635383,#625392,#6153A0,#6253A3,#6057A5,#5F59A7,#5E5BA8,#5D5DA9,#64652A,#64652A,#64652A,#656533,#656544,#656555,#656666,#656576,#646485,#636393,#6263A2,#6262AC,#6263AC,#6063AD,#5F64AD,#5E64AE,#637532,#647532,#647532,#657533,#657543,#657554,#657665,#657676,#657586,#647495,#6373A3,#6373B1,#6372B6,#6470B5,#616FB4,#616EB4,#648539,#648539,#648539,#658539,#648544,#658554,#658665,#658675,#658686,#648595,#6484A4,#6484B3,#6383C0,#6682C1,#6880BF,#677DBE,#64943F,#64943F,#64943F,#64943F,#649444,#649554,#649565,#649575,#659585,#649595,#6595A5,#6594B4,#6594C2,#6693CD,#6A92CC,#6F8FC9,#64A443,#64A443,#64A443,#64A443,#65A446,#64A455,#65A465,#65A575,#65A585,#65A595,#65A5A5,#64A4B5,#65A4C3,#67A4D2,#6AA3D7,#70A1D6,#66B345,#66B345,#66B345,#66B345,#66B347,#66B456,#66B465,#66B475,#65B485,#66B595,#65B4A4,#65B4B4,#66B4C3,#67B4D3,#68B4E1,#71B2E1,#6BBE44,#6BBE44,#6CBE44,#6CBE44,#6CBE4B,#6BBE59,#6ABF67,#69C076,#68C185,#68C294,#67C4A4,#66C4B4,#66C3C3,#68C4D3,#69C4E3,#6DC3EE,#75C043,#75C043,#76C043,#76C044,#76C14F,#75C15A,#75C267,#75C375,#74C383,#72C491,#72C6A0,#72C7AE,#71C9BE,#71CBCE,#71CDDD,#70CFEE,#7CC242,#7DC242,#7DC242,#7EC242,#7EC34B,#7DC359,#7DC465,#7EC573,#7EC680,#7EC78E,#7EC99C,#7DCAAB,#7DCBB9,#7DCDC7,#7ECFD6,#80D1E4,#85C440,#85C440,#86C440,#86C540,#87C546,#87C653,#87C661,#87C770,#88C97E,#88CA8B,#88CB99,#88CCA7,#89CEB5,#88D0C2,#89D1D0,#8AD3DE,#720D10,#730E13,#730C23,#730D33,#721143,#711853,#6F1F62,#6E256F,#6D287C,#6D2A89,#6D2B90,#6B3594,#693E98,#66459B,#644A9E,#624EA0,#721611,#741211,#741121,#731132,#731242,#721952,#712062,#6F2570,#6E297E,#6D2A8A,#6D2C91,#6B3795,#693F99,#66469C,#654B9E,#624FA1,#732412,#742213,#742121,#742132,#742142,#732152,#722162,#712672,#702980,#6E2B8D,#6E3092,#6B3C97,#69429A,#66499D,#654DA0,#6351A2,#733415,#743215,#753221,#753232,#743242,#743253,#733263,#733272,#713281,#703390,#6F3896,#6C419A,#69489D,#674C9F,#6650A2,#6354A3,#74441A,#74441A,#754321,#754333,#754343,#744353,#744263,#734373,#724282,#714391,#70449B,#6E499D,#6B4EA0,#6852A2,#6655A4,#6458A6,#745521,#755521,#755422,#755433,#755443,#755454,#755465,#755374,#735383,#725392,#7153A0,#7054A3,#6C57A5,#6A5AA6,#685BA8,#655DA9,#746528,#746528,#756528,#756532,#766544,#766555,#766565,#756576,#746485,#736393,#7263A2,#7263AC,#7163AC,#6C63AC,#6964AD,#6764AD,#747630,#747530,#74752F,#757533,#767544,#767655,#767766,#777677,#767686,#747495,#7474A4,#7273B2,#7372B5,#7171B5,#6D70B4,#6C6FB4,#748537,#748537,#758536,#758536,#758544,#768655,#768665,#768776,#768787,#768696,#7585A6,#7484B4,#7483C1,#7583C0,#7581BF,#737FBE,#74953C,#74953C,#74953C,#75953C,#759545,#759555,#759665,#759676,#759686,#769696,#7595A6,#7595B5,#7594C4,#7693CC,#7993CB,#7B90C9,#74A440,#74A440,#74A440,#74A440,#75A445,#75A555,#75A565,#75A675,#76A686,#75A696,#75A5A6,#76A5B6,#76A5C5,#76A4D3,#7AA3D6,#7DA2D5,#75B443,#75B443,#75B442,#75B342,#75B348,#75B456,#76B566,#76B575,#75B585,#75B595,#75B5A5,#75B5B5,#75B5C5,#76B5D4,#78B4E2,#7FB3E0,#77C043,#77C043,#77C043,#78C043,#78C14A,#78C258,#78C267,#77C376,#75C486,#76C595,#77C4A4,#76C4B4,#75C4C4,#77C5D4,#78C5E4,#7CC4ED,#7FC241,#7FC341,#80C341,#80C344,#80C350,#7FC45B,#7FC468,#7EC576,#7EC684,#7EC893,#7EC9A1,#7DCAB0,#7DCCC0,#7CCED0,#7DD0E0,#7DD2F1,#86C440,#86C440,#87C540,#87C543,#87C54D,#87C65A,#87C767,#87C874,#88C982,#87CA90,#87CB9E,#87CDAD,#88CEBB,#87D0C9,#88D2D8,#8AD4E7,#8DC63F,#8DC73E,#8EC73E,#8FC73E,#8FC849,#90C855,#90C963,#90CA72,#90CB7F,#91CC8C,#90CE9A,#92CFA8,#91D1B6,#91D2C4,#92D4D2,#92D6E0,#821416,#821417,#831323,#821333,#821543,#811953,#801F63,#7E2471,#7C277D,#7B298A,#7A2A90,#773694,#743E98,#71459B,#6E4A9E,#6C4EA0,#831517,#831517,#831422,#831332,#821542,#821A52,#811F63,#802471,#7D277F,#7C298B,#7B2C91,#783895,#744099,#71469C,#6F4B9E,#6C4FA1,#832518,#842318,#842221,#842232,#842242,#832152,#822162,#812471,#802880,#7F298E,#7C3193,#783B97,#74439A,#72489D,#6F4D9F,#6C51A1,#83341A,#84331A,#843221,#843232,#843243,#843253,#833262,#833272,#813281,#81338F,#7D3A96,#794199,#75489C,#724C9F,#6F51A1,#6D54A3,#84441C,#84441D,#854322,#854333,#854343,#854353,#844363,#834273,#834282,#814291,#80439A,#7B499D,#774EA0,#7352A2,#7055A4,#6D58A5,#845521,#845521,#855422,#855433,#865443,#855454,#855464,#845374,#845383,#835392,#8153A1,#7E54A3,#7957A4,#755AA6,#725BA7,#6E5EA9,#846627,#856527,#856527,#866533,#866544,#866555,#866565,#866575,#856484,#846494,#8263A2,#8162AB,#7E63AB,#7864AC,#7464AC,#7165AD,#84762D,#84752D,#85752D,#867533,#867644,#867655,#877665,#877676,#867586,#857595,#8474A4,#8374B2,#8373B5,#7F73B5,#7A71B4,#7771B4,#848634,#848634,#858633,#858635,#868644,#868655,#868766,#878776,#888888,#878797,#8685A6,#8485B5,#8484C0,#8484BF,#8382BE,#7F80BE,#849539,#849539,#849539,#859539,#859545,#869655,#869665,#869776,#869786,#869797,#8697A7,#8696B6,#8695C4,#8694CA,#8793CA,#8792C9,#84A53D,#84A53D,#84A53D,#84A53D,#85A545,#85A556,#85A666,#86A676,#86A786,#86A796,#86A7A7,#86A7B7,#86A6C6,#86A5D5,#89A4D5,#8CA3D4,#84B440,#84B440,#85B440,#85B440,#85B448,#85B556,#85B566,#85B576,#85B686,#86B696,#85B7A6,#86B6B6,#86B6C6,#87B6D5,#88B5E1,#8DB4DF,#85C340,#85C340,#85C340,#86C440,#86C449,#85C459,#85C467,#86C476,#86C485,#85C595,#86C5A6,#85C5B5,#86C6C5,#87C5D5,#88C6E5,#8CC4EB,#8AC63F,#8AC63F,#8BC63F,#8BC644,#8BC74F,#8BC75C,#8BC86A,#8BC977,#8BCA85,#8BCB94,#8ACDA3,#8ACEB3,#89D0C2,#89D2D3,#8AD4E4,#8AD5F4,#91C83E,#91C83E,#91C83E,#91C845,#92C94F,#92C95C,#91CA68,#91CB75,#91CC83,#92CD91,#93CFA0,#92D0AE,#93D2BC,#92D4CB,#93D5DB,#95D8EA,#97C93C,#97C93C,#98CA3C,#99CA3F,#99CB4B,#99CB57,#99CC65,#99CD73,#9ACE80,#9AD08E,#9AD19C,#9AD2AA,#9BD4B8,#9BD6C6,#9CD7D4,#9CD9E2,#92191C,#92191C,#921824,#921834,#921844,#911B53,#901E63,#8F2372,#8D257F,#8B278B,#892890,#843694,#803E98,#7C449B,#784A9D,#764E9F,#92191C,#93191C,#931922,#931833,#921843,#911B52,#911F62,#902372,#8E2580,#8D278C,#892C91,#853895,#804098,#7C469B,#794B9E,#764FA0,#93251D,#93241D,#942322,#942332,#932342,#922452,#922362,#912371,#8F2580,#8E278D,#8A3193,#853C97,#81439A,#7D489C,#794D9F,#7651A1,#93351E,#94341E,#943322,#943333,#943243,#943352,#933262,#923272,#913381,#903490,#8D3995,#864299,#82479C,#7E4D9F,#7A50A1,#7754A3,#944520,#944420,#954422,#954333,#954243,#944353,#944363,#934372,#924282,#914391,#8F449A,#884A9D,#834E9F,#7F52A1,#7B55A3,#7758A5,#945523,#955523,#955423,#955433,#955343,#955354,#955464,#945374,#935383,#935392,#9153A0,#8D54A2,#8657A4,#815AA5,#7C5CA7,#785DA8,#946626,#956526,#966526,#966533,#966544,#966554,#966565,#966575,#956484,#936393,#9363A2,#9163AA,#8C63AA,#8464AB,#7F65AC,#7C66AD,#94762C,#95762B,#95762B,#967534,#967544,#967655,#977665,#967675,#967586,#957495,#9474A4,#9274B2,#9373B3,#8C73B4,#8673B5,#8273B5,#948631,#948631,#958631,#968633,#968644,#968654,#978765,#988776,#988787,#978697,#9686A6,#9585B5,#9484BE,#9484BE,#9083BE,#8A82BE,#959636,#959636,#959635,#959537,#969645,#969655,#979766,#979776,#989887,#989898,#9898A8,#9797B7,#9696C5,#9695C9,#9695C9,#9493C8,#94A53A,#94A53A,#95A53A,#95A53A,#95A546,#96A656,#96A666,#97A776,#97A787,#97A897,#98A8A8,#98A8B8,#97A7C7,#97A6D5,#98A5D4,#9AA4D3,#94B53D,#94B53D,#94B53C,#94B53C,#95B547,#95B556,#96B666,#96B676,#97B786,#97B797,#97B7A7,#97B8B8,#97B7C7,#97B7D7,#99B6E0,#9BB4DE,#94C33D,#94C33D,#95C33D,#95C33D,#96C449,#96C458,#95C467,#96C576,#96C586,#96C696,#96C6A6,#96C7B7,#96C7C7,#97C7D7,#98C7E6,#9CC5E9,#98CA3C,#98CA3C,#98CA3D,#99CA44,#98CB50,#98CB5C,#98CC6A,#98CD78,#98CE86,#98D095,#98D1A5,#97D2B4,#97D4C5,#98D6D6,#98D6E6,#99D6F5,#9CCB3B,#9CCB3B,#9CCB3D,#9CCB47,#9CCC51,#9DCD5D,#9DCE6A,#9DCF77,#9DD085,#9ED193,#9ED3A2,#9ED4B0,#9FD6BF,#9FD8CE,#9FD9DE,#A0DCED,#A2CD39,#A2CD39,#A2CD39,#A3CD3F,#A3CE4E,#A4CF5A,#A4D067,#A4D174,#A4D282,#A4D390,#A5D49E,#A5D6AD,#A5D7BB,#A6D9C8,#A7DBD7,#A8DDE5,#A11C20,#A21C20,#A21C25,#A21B34,#A11B44,#A11C53,#A01F63,#9F2172,#9D2380,#9B248C,#972A90,#913795,#8C3F98,#87449A,#83499D,#804E9F,#A11C20,#A21D20,#A21C24,#A21B33,#A21B43,#A11C52,#A11F62,#A02172,#9E2380,#9D248D,#982D91,#913995,#8C4098,#88469B,#844B9D,#804FA0,#A22620,#A22521,#A32423,#A22432,#A22342,#A22352,#A12361,#A12370,#A02480,#9F278E,#993293,#923C97,#8D439A,#88499C,#844D9E,#8051A1,#A33521,#A33522,#A43423,#A33433,#A33443,#A23453,#A23362,#A23371,#A13381,#9F348F,#9B3A96,#934399,#8E489C,#894D9E,#8450A0,#8054A2,#A34522,#A44523,#A44323,#A44333,#A34443,#A34353,#A34363,#A34372,#A24381,#A04390,#9F449A,#974A9D,#8F4F9F,#8A52A1,#8555A3,#8158A4,#A45624,#A45524,#A55425,#A55433,#A55443,#A45354,#A55363,#A45373,#A35382,#A25392,#A053A0,#9B55A1,#9258A3,#8C5AA5,#875CA6,#835EA8,#A46627,#A56627,#A66527,#A66534,#A66544,#A66554,#A56464,#A56474,#A46484,#A36393,#A263A2,#A063A9,#9964AA,#9166AB,#8B67AC,#8668AD,#A4762A,#A5762A,#A6762A,#A67534,#A77644,#A77554,#A77565,#A77575,#A67585,#A57494,#A474A3,#A274B2,#A074B3,#9A74B3,#9275B5,#8E76B5,#A5862E,#A5862E,#A6862E,#A68634,#A68645,#A78655,#A88765,#A88776,#A78686,#A78697,#A685A6,#A585B5,#A385BD,#A285BD,#9B84BE,#9684BE,#A49632,#A59632,#A59632,#A59636,#A69645,#A69655,#A79765,#A89776,#A89887,#A99898,#A898A8,#A797B7,#A696C5,#A695C8,#A495C8,#A094C7,#A4A636,#A4A636,#A5A636,#A5A637,#A6A647,#A6A656,#A7A766,#A7A776,#A8A887,#A9A998,#AAAAAA,#A9A9B9,#A8A7C8,#A7A7D3,#A8A6D2,#A8A5D2,#A4B539,#A4B538,#A4B538,#A5B53B,#A6B648,#A6B657,#A6B667,#A7B777,#A8B787,#A8B897,#A8B9A9,#A8B9B9,#A8B9C9,#A8B8D7,#A9B7DE,#AAB5DC,#A3C439,#A4C439,#A4C439,#A5C43C,#A5C54A,#A5C558,#A6C567,#A6C677,#A6C686,#A7C797,#A7C8A8,#A8C8B8,#A8C8C8,#A8C8D8,#A9C8E7,#ABC6E8,#A5CE38,#A5CE38,#A6CE3B,#A6CF44,#A6CF4F,#A6D05C,#A6D16A,#A6D278,#A6D387,#A7D496,#A7D6A7,#A7D7B7,#A8D7C7,#A8D8D8,#A9D7E7,#AAD7F3,#A8CF37,#A9CF38,#A9CF3D,#A9D048,#A9D052,#A9D15E,#A9D26C,#A9D379,#AAD487,#ABD695,#ABD7A4,#ACD9B3,#ACDAC2,#ACDCD1,#ADDEE1,#ADE0F1,#ADD136,#ADD136,#ADD137,#AED141,#AED24F,#AED35B,#AED369,#AFD577,#B0D684,#B0D792,#B0D8A0,#B1DAAF,#B1DCBD,#B2DDCC,#B3DFDA,#B4E1E8,#B11E23,#B11E23,#B11E25,#B11E34,#B11D44,#B11D53,#B01E63,#AF1F72,#AE1F80,#AB208D,#A62C91,#9E3895,#983E97,#92459A,#8E4A9C,#8A4E9F,#B11F23,#B11F24,#B21F24,#B21E33,#B11D43,#B11D53,#B01E62,#AF1F71,#AE1F80,#AD1F8D,#A62F92,#9E3A95,#984098,#93469B,#8E4B9D,#8A4F9F,#B12924,#B22724,#B22524,#B22433,#B22442,#B22552,#B12662,#B02671,#AF2680,#AE278E,#A83493,#A03D97,#994399,#93499C,#8E4D9E,#8A51A0,#B23724,#B23624,#B33525,#B33433,#B23443,#B23453,#B13562,#B13471,#B03481,#AF368F,#AA3B96,#A24399,#9B489B,#944D9E,#8F51A0,#8A54A2,#B34625,#B34525,#B34425,#B44433,#B34443,#B34453,#B24463,#B14472,#B14481,#B04490,#AD469A,#A44B9C,#9C4F9F,#9652A1,#9056A3,#8B58A4,#B35626,#B45526,#B45526,#B45434,#B45443,#B45454,#B35464,#B35373,#B25382,#B25392,#AF53A0,#A956A1,#A058A3,#995BA5,#925DA6,#8D5FA7,#B46627,#B46527,#B56527,#B66534,#B66544,#B56554,#B56464,#B56474,#B36383,#B36393,#B263A1,#AF63A8,#A665AA,#9D67AB,#9869AD,#926AAE,#B47629,#B57629,#B67629,#B67634,#B67544,#B67554,#B67565,#B67575,#B57484,#B47494,#B374A3,#B274B1,#AE74B2,#A676B3,#9F77B5,#9A78B6,#B4872C,#B5862C,#B5862C,#B68636,#B68645,#B78655,#B78665,#B78676,#B78686,#B68595,#B685A5,#B585B4,#B385BC,#AE85BC,#A886BD,#A186BE,#B4962F,#B5962F,#B5962F,#B69636,#B69645,#B79655,#B89766,#B89776,#B89887,#B89797,#B897A8,#B796B6,#B696C6,#B596C6,#B096C7,#AB95C7,#B4A632,#B5A632,#B5A632,#B6A637,#B6A647,#B7A756,#B7A766,#B8A877,#B9A887,#BAA998,#BAA9A9,#B9A8B9,#B8A8C8,#B7A7D1,#B6A6D1,#B3A6D1,#B5B634,#B5B634,#B5B634,#B5B63A,#B6B648,#B7B758,#B7B767,#B8B877,#B8B887,#B9B998,#BABAA9,#BBBBBA,#BABACA,#B9B9D9,#B9B8DC,#B9B6DB,#B4C534,#B4C534,#B5C534,#B5C53B,#B6C54A,#B6C659,#B6C667,#B7C677,#B7C787,#B8C897,#B8C9A8,#B9CAB9,#B9CACA,#BACADA,#BAC9E7,#BBC7E6,#B4D333,#B5D333,#B5D337,#B5D442,#B5D44D,#B5D55B,#B6D569,#B6D578,#B7D687,#B7D697,#B8D8A7,#B8D8B8,#B9D9C8,#B9D9D9,#BAD9E9,#BBD8F1,#B5D436,#B6D439,#B6D43F,#B6D449,#B6D555,#B7D660,#B7D76D,#B7D87B,#B8D989,#B9DB97,#B9DCA6,#BADEB5,#BAE0C5,#BAE1D5,#BBE3E5,#BCE6F6,#B9D533,#BAD536,#BAD53C,#BAD645,#BAD651,#BAD75E,#BBD86B,#BBD979,#BCDA87,#BCDC95,#BDDDA3,#BEDFB1,#BFE0C0,#BFE2CF,#C0E4DD,#C1E6EC,#C01F25,#C02025,#C01F27,#C11F35,#C01E44,#C01D53,#BF1D62,#BE1C71,#BE1A80,#BC1B8D,#B52D91,#AC3995,#A53F97,#9E459A,#994A9C,#944E9E,#C02125,#C02026,#C12026,#C11F34,#C01E43,#C01D53,#BF1D61,#BE1C71,#BE1D7F,#BD208E,#B53092,#AC3B96,#A54198,#9E479B,#994B9D,#944F9F,#C12B26,#C12926,#C12726,#C12733,#C12643,#C02652,#C02662,#BF2671,#BF2880,#BE298F,#B73594,#AD3E97,#A54499,#9F499C,#994D9E,#9451A0,#C23826,#C23726,#C23626,#C23534,#C23543,#C13553,#C13562,#C03572,#C03581,#BF368F,#BA3C96,#AF4499,#A6499C,#A04E9E,#9951A0,#9554A1,#C24626,#C24626,#C34526,#C34534,#C24444,#C24453,#C14463,#C14472,#C14481,#BF4490,#BC469A,#B34C9C,#A9509E,#A253A0,#9B56A2,#9659A4,#C35627,#C35527,#C45527,#C45435,#C45444,#C35454,#C35463,#C25473,#C15482,#C15391,#BF549F,#B757A1,#AD59A3,#A45CA5,#9F5FA6,#9961A8,#C46627,#C46527,#C56528,#C56434,#C56444,#C56454,#C46464,#C46474,#C36483,#C26392,#C163A1,#BD64A7,#B367AA,#AB69AB,#A56BAD,#9F6DAF,#C47629,#C57629,#C57529,#C67536,#C67545,#C57555,#C57565,#C57474,#C47484,#C47494,#C374A3,#C174B0,#BA75B1,#B377B3,#AB79B5,#A57AB6,#C5862A,#C5862A,#C6862A,#C68635,#C68645,#C68655,#C78665,#C78575,#C68585,#C68595,#C585A5,#C485B4,#C185BA,#BA86BB,#B487BD,#AD88BE,#C5972C,#C5972C,#C6962B,#C69636,#C69647,#C79656,#C79666,#C89776,#C89786,#C89797,#C896A6,#C696B7,#C696C4,#C196C5,#BB97C6,#B697C7,#C5A62D,#C5A62D,#C6A62D,#C6A639,#C6A647,#C7A756,#C8A867,#C8A877,#CAA887,#C9A898,#C9A8A8,#C8A8B8,#C8A8C7,#C6A7CF,#C2A7CF,#BEA6D0,#C4B62F,#C4B62E,#C5B62E,#C5B639,#C6B648,#C6B657,#C7B767,#C8B877,#C9B887,#CAB998,#CBBAA9,#CBBABA,#CABACA,#C9B9D9,#C8B8DA,#C5B7DA,#C4C52E,#C5C52E,#C5C532,#C5C63C,#C5C64A,#C6C659,#C7C768,#C7C778,#C8C887,#C9C998,#CACAA9,#CBCBBA,#CCCCCC,#CBCBDB,#CAC9E5,#CAC8E4,#C4D42D,#C5D42D,#C5D433,#C5D540,#C5D54C,#C5D55B,#C6D669,#C6D678,#C7D788,#C8D897,#C9D9A8,#C9D9B9,#CADACA,#CADBDB,#CBDBEB,#CCD9EF,#C4D939,#C4D93C,#C4D941,#C4DA4A,#C5DA56,#C5DB61,#C5DC6E,#C6DD7C,#C7DF8A,#C8E098,#C9E2A8,#C9E3B8,#C9E5C8,#CBE7D8,#CBE9EA,#CBEAFA,#C6DA35,#C6DA39,#C6DA41,#C6DA48,#C6DB54,#C7DC61,#C8DD6E,#C9DE7B,#C9DF8A,#CAE197,#CAE2A5,#CBE4B4,#CCE6C3,#CDE8D2,#CEEAE1,#CFECF0,#CF1F26,#D01F26,#D02027,#D01F35,#D01E44,#CF1D53,#CE1B62,#CE1971,#CD197F,#CB1D8E,#C42F92,#BA3B96,#B14198,#A9469A,#A34A9C,#9E4E9E,#CF2226,#D02026,#D01F27,#D01F34,#D01E43,#CF1E53,#CE1F62,#CE1F71,#CD2080,#CC228F,#C43293,#BA3D96,#B24399,#AA489B,#A44C9D,#9E4F9F,#D02C26,#D02B26,#D02926,#D02834,#D02844,#D02953,#CF2962,#CF2A71,#CE2A80,#CD2C8F,#C63694,#BB4197,#B2469A,#AB4A9C,#A44E9E,#9E51A0,#D13926,#D13826,#D13726,#D13734,#D13644,#D13653,#D03663,#CF3772,#CF3781,#CE388F,#C93D96,#BE4699,#B44B9C,#AC4E9E,#A5529F,#9F55A1,#D14726,#D14626,#D24627,#D24534,#D14544,#D14553,#D14663,#D04572,#D04582,#CF4590,#CB489A,#C14E9D,#B7519F,#AE55A0,#A758A2,#A15BA4,#D25727,#D25627,#D25528,#D25434,#D25444,#D25454,#D25463,#D15473,#D15482,#D05491,#CE549F,#C558A1,#BA5BA3,#B25EA5,#AC61A7,#A564A9,#D36627,#D46627,#D46527,#D46436,#D46445,#D36455,#D36464,#D36474,#D26483,#D16492,#D064A1,#CB65A7,#C168A9,#B86BAB,#B16EAE,#AB70AF,#D47627,#D47627,#D57528,#D57536,#D57545,#D57555,#D57565,#D57574,#D47484,#D37493,#D274A3,#D074AF,#C876B1,#BF79B3,#B87BB5,#B17DB6,#D48628,#D58628,#D5862A,#D68637,#D68647,#D68656,#D68565,#D68676,#D68685,#D58594,#D585A4,#D485B3,#CE86B9,#C687BB,#BF88BC,#B88ABE,#D59728,#D59728,#D6972B,#D69639,#D79647,#D79756,#D79766,#D79776,#D79686,#D79696,#D796A6,#D696B6,#D496C2,#CD96C4,#C797C5,#C198C6,#D6A729,#D6A729,#D6A72B,#D7A738,#D7A748,#D7A758,#D7A767,#D8A877,#D8A887,#D9A897,#D9A8A8,#D8A8B8,#D7A7C7,#D5A7CD,#CDA7CE,#C8A8CF,#D5B728,#D5B728,#D5B72E,#D6B73B,#D6B749,#D7B758,#D8B767,#D8B877,#D9B887,#DAB897,#DAB9A9,#DABAB9,#DAB9C9,#D8B9D8,#D5B8D8,#D0B8D9,#D5C627,#D5C629,#D6C631,#D6C63E,#D6C64A,#D6C759,#D7C769,#D7C878,#D8C887,#D9C998,#DACAA9,#DBCBBA,#DCCBCB,#DBCBDB,#DACAE3,#D7C8E3,#D5D527,#D5D52A,#D5D532,#D5D53F,#D6D64D,#D6D65A,#D7D66A,#D7D779,#D8D888,#D8D998,#D9DAA8,#DADBB9,#DCDCCB,#DDDDDD,#DCDCEB,#DBDAED,#D4DF37,#D4DF3C,#D4DF41,#D4E049,#D4E055,#D5E161,#D6E26E,#D6E37C,#D7E48A,#D8E699,#D9E8A9,#DAEABA,#DAEBCB,#DBECDB,#DBECEC,#DCEBF9,#D3DE38,#D3DF3C,#D3DF43,#D3DF4C,#D4E057,#D5E164,#D5E270,#D6E37E,#D7E48C,#D8E69A,#D8E7A8,#D9E9B7,#DBEBC6,#DCEDD6,#DDF0E5,#DEF2F5,#DF1F25,#DF1E26,#DF1E28,#DF1D35,#DF1C44,#DE1A53,#DE1962,#DE1971,#DD1880,#DC1D8E,#D23293,#C83D96,#BF4398,#B6489A,#AF4C9C,#A94F9E,#DF2525,#E02526,#E02327,#DF2135,#DF2144,#DF2153,#DE2062,#DE2071,#DD2080,#DC238F,#D33493,#C93F97,#BF4599,#B7499B,#B04D9D,#A9509F,#E02F25,#E02E26,#E12D27,#E02B34,#E02C44,#DF2B53,#DF2B62,#DE2B71,#DD2B81,#DC2D8F,#D43895,#CA4298,#C0489A,#B74C9C,#B04F9E,#A952A0,#E03B25,#E13A25,#E13927,#E13835,#E03844,#E03854,#DF3963,#DF3972,#DE3981,#DD3990,#D73F97,#CC489A,#C24D9C,#B9509E,#B153A0,#AB56A1,#E04825,#E14725,#E14727,#E14636,#E14645,#E04654,#E04663,#E04673,#DF4681,#DE4790,#D9499A,#CF4F9D,#C4539F,#BB57A1,#B45AA3,#AE5EA5,#E25725,#E25725,#E25627,#E25537,#E25545,#E15555,#E15564,#E15573,#E05582,#DF5591,#DD559F,#D359A1,#C85EA3,#BF61A6,#B864A8,#B267AA,#E36725,#E36725,#E36628,#E36636,#E36545,#E26555,#E26564,#E26574,#E16583,#E06492,#DF64A1,#D966A7,#CE6AA9,#C56DAC,#BD70AE,#B772B0,#E47625,#E47625,#E47629,#E57637,#E47546,#E47556,#E47565,#E37475,#E37484,#E27493,#E175A3,#E075AE,#D578B0,#CC7AB3,#C47CB4,#BD7FB7,#E48624,#E58624,#E58629,#E58638,#E58647,#E58656,#E58565,#E58575,#E58585,#E48595,#E485A4,#E285B3,#DC86B8,#D288BA,#CA8ABC,#C48CBE,#E59723,#E69623,#E6962A,#E69638,#E69647,#E69656,#E69666,#E69676,#E79686,#E59696,#E596A6,#E595B5,#E396C1,#DA98C3,#D299C5,#CB9AC6,#E5A723,#E5A725,#E5A72D,#E6A739,#E6A748,#E7A757,#E7A767,#E7A776,#E7A787,#E8A797,#E8A7A7,#E8A7B7,#E7A7C7,#E1A7CC,#D9A8CD,#D3A9CF,#E5B721,#E5B725,#E6B630,#E6B73C,#E6B749,#E7B758,#E8B768,#E8B877,#E9B887,#E9B898,#EAB9A8,#EAB8B9,#E9B9C9,#E7B8D6,#E1B9D7,#DAB9D8,#E5C621,#E5C626,#E6C730,#E6C73E,#E6C74B,#E7C759,#E7C768,#E8C878,#E9C988,#EAC998,#EBC9A9,#EBCABA,#EBCACA,#EBCADA,#E8CAE1,#E2C9E1,#E5D628,#E5D62D,#E5D634,#E5D640,#E5D64D,#E6D75B,#E7D86A,#E7D87A,#E9D888,#EAD998,#EBDAA9,#EBDBBA,#ECDBCB,#EDDCDC,#ECDCEC,#E9DAEB,#E5E532,#E5E536,#E5E63D,#E5E646,#E6E652,#E6E660,#E6E66D,#E7E77C,#E8E88A,#E9E899,#EAE9A9,#EAEABA,#EBECCB,#EDEDDC,#EEEEEE,#EDECF6,#E2E43C,#E2E440,#E2E547,#E2E550,#E3E65A,#E3E766,#E4E873,#E4E981,#E5EA8E,#E6EC9C,#E7EDAB,#E9EFBA,#EBF2CA,#ECF4DA,#EDF6EA,#EEF8F9,#ED2123,#ED2123,#ED1F2A,#ED1E38,#ED1D46,#EE1E54,#ED1D63,#ED1E72,#EC1F81,#EB208F,#E13393,#D63F97,#CC4699,#C34A9B,#BC4D9D,#B5519E,#ED2723,#EE2623,#EE2629,#EE2538,#EE2446,#EE2554,#EE2463,#EE2472,#ED2581,#EB268F,#E23694,#D64197,#CC479A,#C34B9B,#BC4F9D,#B5529F,#EE3023,#EE3023,#EE2F29,#EE2F38,#EE2E46,#EE2F55,#EE2E63,#EE2F72,#ED2F81,#EC2F8F,#E33A95,#D74498,#CD4A9B,#C44E9C,#BD519E,#B655A0,#EF3D23,#EF3C23,#EF3C29,#EF3B37,#EF3B46,#EF3B55,#EF3B63,#EE3B73,#EE3B81,#ED3B90,#E64197,#DA499A,#CF4F9D,#C6539F,#BE56A0,#B85AA2,#EF4A22,#EF4922,#EF492A,#F04937,#EF4946,#EF4855,#EF4863,#EF4873,#EE4882,#EE4990,#E94B9B,#DD519D,#D256A0,#C95AA2,#C15DA4,#BA61A6,#F15822,#F15722,#F1572B,#F15738,#F15746,#F15755,#F05664,#F05673,#F05782,#EE5691,#EB579F,#E15CA2,#D660A4,#CC64A6,#C567A9,#BF6AAA,#F26721,#F26721,#F2672B,#F26638,#F26647,#F26656,#F16565,#F16574,#F06583,#F06592,#EF65A1,#E768A7,#DB6CAA,#D26FAC,#CA72AE,#C375B1,#F37720,#F47720,#F4762A,#F47638,#F37647,#F37656,#F37665,#F37674,#F27584,#F27593,#F076A2,#ED76AE,#E179B0,#D87CB2,#D07EB5,#C981B7,#F4861F,#F48622,#F4862B,#F48639,#F58648,#F58656,#F58666,#F58575,#F48585,#F48595,#F385A4,#F286B3,#E988B8,#DF8ABA,#D68CBC,#D08EBE,#F4961F,#F49624,#F5962E,#F5963A,#F59648,#F59658,#F69667,#F69676,#F69686,#F69696,#F596A6,#F496B5,#F196C0,#E698C2,#DD9AC4,#D69CC6,#F4A71E,#F5A724,#F5A72F,#F5A73B,#F5A649,#F5A659,#F6A767,#F7A777,#F7A787,#F7A797,#F7A7A7,#F6A7B6,#F6A7C6,#EEA8CA,#E4A9CD,#DDAACE,#F5B71D,#F5B723,#F5B72E,#F5B73D,#F6B74A,#F7B759,#F7B869,#F7B878,#F8B887,#F8B898,#FAB9A8,#F9B8B8,#F8B8C8,#F6B8D4,#ECB9D6,#E4BAD7,#F5C724,#F6C729,#F6C732,#F6C73E,#F6C74C,#F6C75A,#F7C76A,#F8C879,#F8C888,#F9C999,#FAC9A9,#FBCABA,#FACACA,#FACAD9,#F3C9DF,#ECCAE1,#F5D729,#F5D72F,#F5D736,#F6D741,#F6D74E,#F7D75C,#F7D86B,#F8D87A,#F9D989,#F9D999,#FBDAA9,#FCDBBA,#FCDCCB,#FCDCDB,#FBDBE9,#F3DAEA,#F6E72D,#F6E732,#F6E73A,#F6E744,#F7E750,#F7E75F,#F7E86C,#F8E87B,#F9E98A,#F9EA99,#FAEAAA,#FBEBBA,#FCECCB,#FEEDDC,#FEEDED,#FBECF4,#F1EA3F,#F1EA43,#F1EB49,#F2EB52,#F2EC5C,#F3ED68,#F4EE75,#F4EF82,#F5F090,#F6F29E,#F7F4AD,#F8F5BC,#FAF8CC,#FBFADC,#FDFCEE,#FFFFFF';

    var cmyk = function() {
      var init = function() {
        rgbTable = rgb2cmyk.split(/,/g).map(function(color) {
          return hex2rgb(color);
        });
        if (rgbTable.length != 4096) {
          throw '!' + rgbTable.length;
        }
      };
      var get_rgb = function(r, g, b) {
        if (!rgbTable) {
          init();
        }
        return rgbTable[(r << 8) | (g << 4) | b].slice();
      }
      var rgbTable = null;
      return {
        rgb2cmyk: function(r, g, b) {
          var ir = ~~(r / 17);
          var ig = ~~(g / 17);
          var ib = ~~(b / 17);
          var rgb = get_rgb(ir, ig, ib);
          var r0 = rgb[0];
          var g0 = rgb[1];
          var b0 = rgb[2];
          var tmp, a;
          if (ir + 1 < 16) {
            tmp = get_rgb(ir + 1, ig, ib);
            a = (r % 17) / 17;
            rgb[0] += ~~( (tmp[0] - r0) * a);
            rgb[1] += ~~( (tmp[1] - g0) * a);
            rgb[2] += ~~( (tmp[2] - b0) * a);
          }
          if (ig + 1 < 16) {
            tmp = get_rgb(ir, ig + 1, ib);
            a = (g % 17) / 17;
            rgb[0] += ~~( (tmp[0] - r0) * a);
            rgb[1] += ~~( (tmp[1] - g0) * a);
            rgb[2] += ~~( (tmp[2] - b0) * a);
          }
          if (ib + 1 < 16) {
            tmp = get_rgb(ir, ig, ib + 1);
            a = (b % 17) / 17;
            rgb[0] += ~~( (tmp[0] - r0) * a);
            rgb[1] += ~~( (tmp[1] - g0) * a);
            rgb[2] += ~~( (tmp[2] - b0) * a);
          }
          return rgb;
        }
      };
    }();
    //
    var unit2ff = function(v) { return Math.floor(v * 255); };
    var ff2unit = function(v) { return v / 255; };
    //
    var hsl2rgb = function(h, s, l) {
      h = h < 0 ? h % 360 + 360 : h % 360;
      var c = (1 - Math.abs(2 * l - 1) ) * s;
      var hh = h / 60;
      var x = c * (1 - Math.abs(hh % 2 - 1));
      var a = hh < 1 ? [c, x, 0] : hh < 2 ? [x, c, 0] :
        hh < 3 ? [0, c, x] : hh < 4 ? [0, x, c] :
        hh < 5 ? [x, 0, c] : [c, 0, x];
      var m = l - c / 2;
      a[0] = unit2ff(a[0] + m);
      a[1] = unit2ff(a[1] + m);
      a[2] = unit2ff(a[2] + m);
      return a;
    };
    var hsv2rgb = function(h, s, v) {
      h = h < 0 ? h % 360 + 360 : h % 360;
      var c = v * s;
      var hh = h / 60;
      var x = c * (1 - Math.abs(hh % 2 - 1));
      var a = hh < 1 ? [c, x, 0] : hh < 2 ? [x, c, 0] :
        hh < 3 ? [0, c, x] : hh < 4 ? [0, x, c] :
        hh < 5 ? [x, 0, c] : [c, 0, x];
      var m = v - c;
      a[0] = unit2ff(a[0] + m);
      a[1] = unit2ff(a[1] + m);
      a[2] = unit2ff(a[2] + m);
      return a;
    };
    var rgb2hslv = function(r, g, b, method) {
      r = ff2unit(r);
      g = ff2unit(g);
      b = ff2unit(b);
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var h = max == min? 0 : max == r?
          60 * (0 + (g - b) / (max - min) ) : max == g?
          60 * (2 + (b - r) / (max - min) ) :
          60 * (4 + (r - g) / (max - min) );
      if (h < 0) {
        h += 360;
      }
      var s;
      if (method == 'hsl') {
        s = max == 0? 0 : min == 1? 0 :
          (max - min) / (1 - Math.abs(max + min - 1) );
        var l = (max + min) / 2;
        return [h, s, l];
      } else if (method == 'hsv') {
        s = max == 0? 0 : (max - min) / max;
        var v = max;
        return [h, s, v];
      } else {
        return [0, 0, 0];
      }
    };
    var rgb2hsl = function(r, g, b) {
      return rgb2hslv(r, g, b, 'hsl');
    };
    var rgb2hsv = function(r, g, b) {
      return rgb2hslv(r, g, b, 'hsv');
    };
    var color2rgb = function() {
      var ctx = null;
      var cache = {};
      return function(color) {
        var rgb = cache[color];
        if (!rgb) {
          if (ctx == null) {
            ctx = document.createElement('canvas').getContext('2d');
            ctx.canvas.width = 1;
            ctx.canvas.height = 1;
          }
          ctx.fillStyle = color;
          ctx.fillRect(0, 0, 1, 1);
          var data = ctx.getImageData(0, 0, 1, 1).data;
          rgb = Object.freeze([ data[0], data[1], data[2], data[3] ]);
          cache[color] = rgb;
        }
        return rgb;
      };
    }();
    return {
      rgb2hex: rgb2hex, hex2rgb: hex2rgb,
      hsl2rgb: hsl2rgb, rgb2hsl: rgb2hsl,
      hsv2rgb: hsv2rgb, rgb2hsv: rgb2hsv,
      color2rgb: color2rgb,
      rad2hue: rad2hue, hue2rad: hue2rad,
      rgb2cmyk: cmyk.rgb2cmyk
    };
  }();

  var components = {};

  components['color-util'] = {
    methods: ColorUtil
  };

  components['modal-dialog'] = {
    template: '<div style="position:absolute;">' +
      '<div style="position:absolute;" ref="frame"><slot /></div>' +
    '</div>',
    mounted: function() {
      var left = document.documentElement.scrollLeft;
      var top = document.documentElement.scrollTop;
      var frame = this.$refs.frame;
      Vue.util.extend(this.$el.style, {
        left: left + 'px',
        top: top + 'px',
        width: window.innerWidth + 'px',
        height: window.innerHeight + 'px',
        backgroundColor: 'rgba(0,0,0,0.8)'
      });
      Vue.util.extend(frame.style, {
        backgroundColor: '#999', padding: '8px'
      });

      this.$nextTick(function() {
        Vue.util.extend(frame.style, {
          left: ( (window.innerWidth - frame.offsetWidth) / 2 ) + 'px',
          top: ( (window.innerHeight - frame.offsetHeight) / 2 ) + 'px'
        });
      });

      var mounsedownHandler = function(event) {
        if (closest(function(elm) {
            return elm == frame; }.bind(this), event) ) {
          return;
        }
        $(document).off('mousedown', mounsedownHandler);
        this.$emit('close');
      }.bind(this);
      $(document).on('mousedown', mounsedownHandler);
    }
  };

  components['resizable-border'] = {
    template: '<div></div>',
    props : {
      debug: { default: false },
      enable: { default: '' }
    },
    mounted: function() {
      var elms = [ this.$el ];
      for (var i = 0; i < 7; i += 1) {
        var elm = document.createElement('DIV');
        this.$el.parentNode.appendChild(elm);
        elms.push(elm);
      }
      // 4 0 5
      // 3   1
      // 7 2 6
      var box = '4px';
      var bdr = '2px';
      var bar = '100%';
      var edg = '-1px';
      var styles = [
        { width: bar, height: bdr, left: edg, top: edg, cursor: 'ns-resize' },
        { width: bdr, height: bar, right: edg, top: edg, cursor: 'ew-resize' },
        { width: bar, height: bdr, left: edg, bottom: edg, cursor: 'ns-resize' },
        { width: bdr, height: bar, left: edg, top: edg, cursor: 'ew-resize' },
        { width: box, height: box, left: edg, top: edg, cursor: 'nwse-resize' },
        { width: box, height: box, right: edg, top: edg, cursor: 'nesw-resize ' },
        { width: box, height: box, right: edg, bottom: edg, cursor: 'nwse-resize' },
        { width: box, height: box, left: edg, bottom: edg, cursor: 'nesw-resize ' }
      ];
      var dirs = [ 't', 'r', 'b', 'l', 'lt', 'rt', 'rb', 'lb' ];
      var opacity = this.debug? '0.5' : '0';
      var vm = this;
      var extend = Vue.util.extend;
      var enable = this.enable? this.enable.split(/[\s,]+/g) : null;
      elms.forEach(function(e, i) {
        extend(e.style, extend(styles[i], {
          position: 'absolute',
          backgroundColor: i < 4? 'red' : 'blue',
          opacity: opacity
        }) );
        if (enable && enable.indexOf(dirs[i]) == -1) {
          e.style.display = 'none';
        }
        $(e).on('mousedown', function(event) {
          var mousemoveHandler = function(event) {
            vm.$emit('resizemove', {
              dir: dirs[i],
              dx: event.pageX - dragPoint.x,
              dy: event.pageY - dragPoint.y
            });
          };
          var mouseupHandler = function(event) {
            $(document).off('mousemove', mousemoveHandler).
              off('mouseup', mouseupHandler);
            document.body.removeChild(block);
            vm.$emit('resizeend', { dir: dirs[i] });
          };
          //
          event.preventDefault();
          $(document).on('mousemove', mousemoveHandler).
            on('mouseup', mouseupHandler);
          var dragPoint = { x: event.pageX, y: event.pageY };
          var block = document.createElement('DIV');
          extend(block.style, {
            position: 'absolute',
            left: document.documentElement.scrollLeft + 'px',
            top: document.documentElement.scrollTop + 'px',
            width: '100%', height: '100%',
            backgroundColor: 'green',
            opacity: opacity,
            cursor: styles[i].cursor,
          });
          document.body.appendChild(block);
          vm.$emit('resizestart', { dir: dirs[i] });
        });
      });
    }
  };

  components['x-svg'] = {
    template: '<g></g>',
    props: {
      svg: { default: '', type: String },
      x: { default: 0, type: Number },
      y: { default: 0, type: Number },
      width: { default: 100, type: Number },
      height: { default: 100, type: Number }
    },
    data: function() { return { mounted: false }; },
    watch: { layout: function() {} },
    computed: {
      layout: function() {
        if (this.$el) {
          this.$el.innerHTML = this.svg;
          this.$nextTick(function() {
            var svg = this.$el.firstChild;
            if (svg) {
              [ 'x', 'y', 'width', 'height' ].
              forEach(function(p) {
                svg.setAttribute(p, '' + this[p]);
              }.bind(this) );
              this.$emit('load', { svg: svg });
            }
          });
        }
        return [ this.svg, this.x, this.y, this.width, this.height,
          this.mounted ];
      }
    },
    mounted: function() {
      this.mounted = true;
    }
  };

  var imageLoader = function() {
    var cache = {};
    return {
      load: function(href, loadHandler) {
        if (cache[href]) {
          loadHandler(cache[href]);
          return;
        }
        var img = document.createElement('img');
        img.style.display = 'none';
        img.addEventListener('load', function() {
          var ctx = document.createElement('canvas').getContext('2d');
          ctx.canvas.width = img.width;
          ctx.canvas.height = img.height;
          ctx.drawImage(img, 0, 0);
          cache[href] = ctx.canvas.toDataURL();
          document.body.removeChild(img);
          loadHandler(cache[href]);
        }.bind(this) );
        img.src = href;
        document.body.appendChild(img);
      }
    };
  }();

  components['x-image'] = {
    template: '<image xmlns:xlink="http://www.w3.org/1999/xlink"' +
        ' style="image-rendering:pixelated;" preserveAspectRatio="none"' +
        ' :x="x" :y="y" :width="width" :height="height"' +
        ' :clip-path="clipPath" :xlink:href="dataUrl" >' +
      '</image>',
    props: {
      href: { default: '', type: String },
      x: { default: 0, type: Number },
      y: { default: 0, type: Number },
      width: { default: 100, type: Number },
      height: { default: 100, type: Number },
      clipPath: { default: '', type: String }
    },
    data: function() { return { dataUrl: '' }; },
    mounted: function() {
      imageLoader.load(this.href, function(dataUrl) {
        this.dataUrl = dataUrl;
      }.bind(this) );
    }
  };

  components['slider'] = {
    template: '<label>' +
      '<input ref="input" type="range" style="vertical-align:middle;width:100px;"' +
        ' :value="str(value)" :min="str(min)" :max="str(max)"' +
        ' @input="inputHandler" />' +
      '<span v-html="label" style="vertical-align:middle;"></span></label>',
    mounted: function() {
    },
    props: {
      min: { default: 0, type: Number },
      max: { default: 10, type: Number },
      value: { default: 5, type: Number },
      label: { default: '', type: String }
    },
    methods: {
      str: function(n) {
        return '' + n;
      },
      inputHandler: function() {
        this.$emit('input', +this.$refs.input.value);
      }
    }
  };

  components['qrcode'] = {
    template: '<image xmlns:xlink="http://www.w3.org/1999/xlink"' +
        ' style="image-rendering:pixelated;" :transform="transform"' +
        ' :width="imgSize" :height="imgSize" :xlink:href="url" />',
    props: {
      typeNumber: { default: 0 },
      errorCorrectionLevel: { default: 'L', type: String },
      negativePattern: { default: false, type: Boolean },
      data: { default: 'hi!', type: String },
      x: { default: 0, type: Number },
      y: { default: 0, type: Number },
      size: { default: 100, type: Number },
      pixels : { default: function() { return [ '#666' ] }, type: Array }
    },
    data: function() {
      return { url: '', imgSize: 0 };
    },
    watch: { qrcode: function() {} },
    computed: {
      qrcode: function() {
        var cacheMap = qrcode.$vueCacheMap ||
          (qrcode.$vueCacheMap = { stat: { callCount: 0, failCount: 0 } });
        var stat = cacheMap.stat;
        var qrDataKey = [this.typeNumber, this.errorCorrectionLevel,
                   this.negativePattern,
                   this.pixels.join(','), '', this.data].join('\n');
        var qrData = cacheMap[qrDataKey];
        stat.callCount +=1;
        if (!qrData) {
          stat.failCount +=1;
          var qrKey = [this.typeNumber, this.errorCorrectionLevel,
            '', this.data].join('\n');
          var qr = cacheMap[qrKey];
          stat.callCount +=1;
          if (!qr) {
            stat.failCount +=1;
            // cache not found, create new
            qr = qrcode(this.typeNumber, this.errorCorrectionLevel);
            qr.addData(this.data);
            qr.make();
            cacheMap[qrKey] = qr;
          }
          var j = 0;
          var pixels = this.pixels;
          var moduleCount = qr.getModuleCount();
          var ctx = document.createElement('canvas').getContext('2d');
          ctx.canvas.width = ctx.canvas.height = moduleCount;
          var image = ctx.createImageData(moduleCount, moduleCount);
          var index = 0;
          // There are three position probe patterns
          // at fixed position and size.
          var posProbes = [
            { x: 2, y: 2, pixel: null },
            { x: moduleCount - 5, y: 2, pixel: null },
            { x: 2, y: moduleCount - 5, pixel: null }
          ];
          for (var r = 0; r < moduleCount; r += 1) {
            for (var c = 0; c < moduleCount; c += 1) {
              if (qr.isDark(r, c) ^ this.negativePattern) {
                var pixel = pixels[j];
                j = (j + 1) % pixels.length;
                posProbes.forEach(function(pp) {
                  if (pp.x == c && pp.y == r) {
                    pp.pixel = pixel; // store left-top pixel
                  } else if (pp.x <= c && c < pp.x + 3 &&
                    pp.y <= r && r < pp.y + 3) {
                    pixel = pp.pixel; // use stored pixel
                  }
                });
                var rgbPixel = ColorUtil.color2rgb(pixel);
                image.data[index] = rgbPixel[0];
                image.data[index + 1] = rgbPixel[1];
                image.data[index + 2] = rgbPixel[2];
                image.data[index + 3] = rgbPixel[3];
              }
              index += 4;
            }
          }
          ctx.putImageData(image, 0, 0);
          // put to cache.
          qrData = cacheMap[qrDataKey] = {
            url: ctx.canvas.toDataURL(), imgSize: moduleCount };
        }
        this.url = qrData.url;
        this.imgSize = qrData.imgSize;
        return [ this.url, this.imgSize ];
      },
      transform: function() {
        if (this.imgSize == 0) {
          return '';
        }
        return 'translate(' + this.x + ' ' + this.y +
          ')scale(' + this.size / this.imgSize + ')';
      }
    }
  };

  components['qrcode-path'] = {
    template: '<path fill="none" stroke="none" :d="pathData" :transform="transform" />',
    props: {
      typeNumber: { default: 0 },
      errorCorrectionLevel: { default: 'L', type: String },
      negativePattern: { default: false, type: Boolean },
      data: { default: 'hi!', type: String },
      x: { default: 0, type: Number },
      y: { default: 0, type: Number },
      size: { default: 100, type: Number }
    },
    data: function() {
      return { pathData: '', imgSize: 0 };
    },
    watch: { qrcode: function() {} },
    computed: {
      qrcode: function() {
        var cacheMap = qrcode.$vueCacheMap ||
          (qrcode.$vueCacheMap = { stat: { callCount: 0, failCount: 0 } });
        var stat = cacheMap.stat;
        var qrDataKey = [this.typeNumber, this.errorCorrectionLevel,
                   this.negativePattern,
                   '$path$', '', this.data].join('\n');
        var qrData = cacheMap[qrDataKey];
        stat.callCount +=1;
        if (!qrData) {
          stat.failCount +=1;
          var qrKey = [this.typeNumber, this.errorCorrectionLevel,
            '', this.data].join('\n');
          var qr = cacheMap[qrKey];
          stat.callCount +=1;
          if (!qr) {
            stat.failCount +=1;
            // cache not found, create new
            qr = qrcode(this.typeNumber, this.errorCorrectionLevel);
            qr.addData(this.data);
            qr.make();
            cacheMap[qrKey] = qr;
          }
          var pathData = '';
          var moduleCount = qr.getModuleCount();
          for (var r = 0; r < moduleCount; r += 1) {
            for (var c = 0; c < moduleCount; c += 1) {
              if (qr.isDark(r, c) ^ this.negativePattern) {
                pathData += 'M' + c + ' ' + r;
                pathData += 'L' + (c + 1) + ' ' + r;
                pathData += 'L' + (c + 1) + ' ' + (r + 1);
                pathData += 'L' + c + ' ' + (r + 1);
                pathData += 'Z ';
              }
            }
          }
          // put to cache.
          qrData = cacheMap[qrDataKey] = {
            pathData: pathData, imgSize: moduleCount };
        }
        this.pathData = qrData.pathData;
        this.imgSize = qrData.imgSize;
        return [ this.pathData, this.imgSize ];
      },
      transform: function() {
        if (this.imgSize == 0) {
          return '';
        }
        return 'translate(' + this.x + ' ' + this.y +
          ')scale(' + this.size / this.imgSize + ')';
      }
    }
  };

  components['color-circle'] = {
    template: '<canvas :width="size" :height="size"></canvas>',
    props: {
      size: { default: 100, type: Number },
      brightness: { default: 1, type: Number },
      overpaint: { default: 0, type: Number },
      fakeCmyk: { default: false, type: Boolean }
    },
    data: function() {
      return {
        mounted: false
      }
    },
    watch: {
      render: function() {}
    },
    computed: {
      render: function() {
        if (this.mounted) {
          var size = this.size;
          var r = size / 2;
          var ctx = this.$el.getContext('2d');
          var image = ctx.createImageData(size, size);
          var data = image.data;
          var i = 0;
          var PI2 = Math.PI * 2;
          var h = 0;
          var s = 1;
          var v = this.brightness;
          for (var y = 0; y < size; y += 1) {
            for (var x = 0; x < size; x += 1) {
              var px = x - r;
              var py = y - r;
              var pr = Math.sqrt(px * px + py * py);
              if (pr < r + this.overpaint) {
                var rad = Math.atan2(-py, px);
                //h = rad * 360 / PI2;
                h = ColorUtil.rad2hue(rad);
                s = Math.min(pr / r, 1);
                var rgb = ColorUtil.hsv2rgb(h, s, v);
                if (this.fakeCmyk) {
                  rgb = ColorUtil.rgb2cmyk.apply(null, rgb);
                }
                data[i] = rgb[0];
                data[i + 1] = rgb[1];
                data[i + 2] = rgb[2];
                data[i + 3] = 255;
              }
              i += 4;
            }
          }
          ctx.putImageData(image, 0, 0);
        }
        return [ this.mounted, this.size, this.brightness,
                this.overpaint, this.fakeCmyk ];
      }
    },
    mounted: function() {
      this.mounted = true;
    }
  };

  components['color-pointer'] = {
    template: '<canvas></canvas>',
    props: {
      width: { default: 50 },
      height: { default: 50 },
      add: { default: true },
      fill: { default: '#ccc' },
      shadow: { default: true }
    },
    watch: { render: function() {} },
    computed: {
      render: function() {
        if (!this.ctx) {
          return [ this.ctx ];
        }

        var ctx = this.ctx;
        ctx.canvas.width = this.width;
        ctx.canvas.height = this.height;

        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.save();

        ctx.scale(this.width, this.height);
        ctx.scale(1 / this.viewBox[2], 1 / this.viewBox[3]);
        ctx.translate(-this.viewBox[0], -this.viewBox[1]);

        ctx.fillStyle = 'rgba(255,0,0,0)';
        ctx.fillRect(this.viewBox[0], this.viewBox[1],
            this.viewBox[2], this.viewBox[3]);
        this.pointers.forEach(function(p, i) {

          if (!(this.shadow || (i == 1) ) ) {
            return;
          }
          ctx.fillStyle = this.fill;
          ctx.beginPath();
          ctx.arc(0, 0, 5, 0, Math.PI * 2);
          ctx.fill();

          ctx.lineCap = 'round';
          ctx.strokeStyle = p.color;
          ctx.lineWidth = p.width;
          ctx.beginPath();
          ctx.moveTo(0, -5.5);
          ctx.lineTo(0, -13);
          ctx.stroke();

          ctx.beginPath();
          ctx.arc(0, 0, 5, 0, Math.PI * 2);
          ctx.stroke();

          ctx.beginPath();
          ctx.moveTo(2, -9);
          ctx.lineTo(6, -9);
          ctx.stroke();

          if (this.add) {
            ctx.beginPath();
            ctx.moveTo(4, -7);
            ctx.lineTo(4, -11);
            ctx.stroke();
          }

        }.bind(this) );
        ctx.restore();

        return [ this.ctx, this.add, this.shadow, this.fill ];
      }
    },
    data: function() {
      return {
        ctx: null,
        viewBox: [-11.5, -16.5, 24, 24],
        pointers : [
          { color: '#fff', width: '3' },
          { color: '#000', width: '1' }
        ]
      };
    },
    mounted: function() {
      if (this.$el && typeof this.$el.getContext == 'function') {
        this.ctx = this.$el.getContext('2d');
      }
    }
  };

  components['color-picker'] = {
    template: '<div>' +
        '<div style="position:relative;display:inline-block;float:left;">' +
          '<color-pointer ref="addPointer" style="display:none;" fill="none"' +
          ' :width="24" :height="24" :add="true"></color-pointer>' +
          '<color-pointer ref="delPointer" style="display:none;" fill="none"' +
          ' :width="24" :height="24" :add="false"></color-pointer>' +
          '<color-circle :fake-cmyk="fakeCmyk" :overpaint="2" :size="size" :style="{ margin: margin + \'px\' }"/>' +
          '<svg tabindex="0" ref="colorEditor"' +
          ' style="position:absolute;left:0px;top:0px;outline:none;"' +
          ' @mousedown="picker_mousedownHandler($event)"' +
          ' @mouseover="picker_mouseoverHandler($event)"' +
          ' @mouseout="picker_mouseoverHandler($event)"' +
            ' :width="size + margin * 2" :height="size + margin * 2"' +
            ' :viewBox.camel="viewBox">' +
            '<circle cx="0" cy="0" :r="size / 2 + 2"' +
            ' fill="none" stroke="white" stroke-width="4" />' +
            '<path v-for="c in colorMarkers" :d="pathLine(c.x, c.y)"' +
              ' fill="none" stroke="black"' +
              ' :stroke-dasharray="linked?\'\':\'2\'"' +
              ' :stroke-width="c.i == overIndex? 2 : 1" />' +
            '<g :style="colorMarkerStyle" v-for="c in colorMarkers"' +
              ' :transform="\'translate(\' + c.x + \' \' + c.y + \')\'"' +
              ' :x-color-marker-index="c.i">' +
              '<circle :r="c.r + (c.i == selectedIndex? 3 : 1)' +
              ' + (c.i == overIndex? 1 : 0)"' +
                ' fill="black" stroke="none"/>' +
              '<circle :r="c.r" :fill="c.displayColor" stroke="white" />' +
            '</g>' +
          '</svg>' +
        '</div>' +
        '<div style="display:inline-block;float:left;">' +
          '<div tabindex="0" v-for="c in colorMarkers"' +
            ' style="display:inline-block;line-height:1;' +
              'border:1px solid #000;outline:none;"' +
            ' @click="setSelectedIndex(c.i)">' +
            '<div :style="colorChooserStyle(c)"></div>' +
          '</div>' +
          '<template v-for="(hs, i) in hsvSliders" >' +
            '<br/><label><input type="range"' +
              ' style="width:100px;vertical-align:middle;"' +
              ' min="0" :max="hs.max" :step="hs.step" :value="hs.value"' +
              ' @mousedown="hsv_mousedownHandler($event, i, 1)" />' +
            '<span style="vertical-align:middle;">' +
            '{{hs.label}} <input type="text" style="text-align:right;width:3rem;"' +
            ' :value="formatNumber(hs.value * hs.scale, 2)"' +
            ' @focus="$event.target.select()"' +
            ' @change="hsv_changeHandler($event, i, hs.scale)" />{{hs.unit}}' +
            '</span></label>' +
          '</template>' +
          '<br/><label><input type="checkbox" v-model="linked" />Linked</label>' +
          '<br/><div tabindex="0" v-for="(button, i) in buttonStates"' +
              ' style="margin-right:4px;line-height:1;position:relative;' +
                'display:inline-block;outline:none;"' +
              ' @mouseover="button_mouseHandler($event, i)"' +
              ' @mouseout="button_mouseHandler($event, i)"' +
              ' @mousedown="button_mouseHandler($event, i)"' +
              ' @click="button_mouseHandler($event, i)">' +
            '<color-pointer :width="24" :height="24"' +
              ' :add="i == 0" :shadow="false" fill="#ccc" ></color-pointer>' +
            '<svg style="position:absolute;left:0px;top:0px;"' +
              ' width="24" height="24" :viewBox.camel="\'0 0 16 16\'" >' +
              '<rect :opacity="buttonOverlay(i)? 0.2 : 0"' +
              ' fill="#0cf" stroke="#00c" x="0.5" y="0.5" width="15" height="15" />' +
            '</svg>' +
          '</div>' +
        '</div>' +
        '<br style="clear:both;"/>' +
      '</div>',
    props: {
      value: { default: ['#f00', '#0f0', '#00f'], type: Array },
      margin: { default: 16, type: Number },
      size: { default: 216, type: Number },
      fakeCmyk: { default: false, type: Boolean }
    },
    data: function() {
      return {
        linked: true,
        overIndex: -1,
        selectedIndex: 0,
        colorMarkers: [],
        buttonMode: '',
        buttonStates: [
          { down: false, over: false, mode: 'add' },
          { down: false, over: false, mode: 'del' }
        ]
      };
    },
    watch: {
      prepareMarkers: function() {},
      buttonMode: function(newVal) {
        this.$refs.colorEditor.style.cursor = newVal?
            this.getCursor(newVal == 'add') : '';
      }
    },
    computed: {
      colors: function() { return this.value; },
      hsvSliders: function() {
        var colorMarker = this.colorMarkers[this.selectedIndex];
        var values = colorMarker? colorMarker.hsv : [0, 0, 0];
        return [
          { label: 'H', max: '360', step: '0.01', scale: 1, unit: '°' },
          { label: 'S', max: '1', step: '0.01', scale: 100, unit: '%' },
          { label: 'V', max: '1', step: '0.01', scale: 100, unit: '%' },
        ].map(function(hs, i) {
          hs.value = values[i];
          return hs;
        });
      },
      viewBox: function() {
        var s = this.size / 2 + this.margin;
        return -s + ' ' + -s + ' ' + s * 2 + ' ' + s * 2;
      },
      prepareMarkers: function() {
        var r = this.size / 2;
        this.colorMarkers = this.colors.map(function(color, i) {
          var rgb = ColorUtil.hex2rgb(color);
          var hsv = ColorUtil.rgb2hsv.apply(null, rgb);
          var t = ColorUtil.hue2rad(hsv[0]);
          var x = Math.cos(t) * r * hsv[1];
          var y = -Math.sin(t) * r * hsv[1];
          return { i: i, x: x, y: y, r: i == 0? 10 : 6, hsv: hsv,
                  displayColor: this.toDisplayColor(color) };
        }.bind(this) );
        return [ this.size, this.colors, this.fakeCmyk ];
      },
      colorMarkerStyle: function() {
        return this.buttonMode? {} : { cursor: 'move' };
      }
    },
    methods: {
      toDisplayColor: function(color) {
        if (this.fakeCmyk) {
          return ColorUtil.rgb2hex.apply(null,
                   ColorUtil.rgb2cmyk.apply(null,
                     ColorUtil.hex2rgb(color) ) );
        }
        return color;
      },
      getCursor: function(add) {
        var pointer =  add?
            this.$refs.addPointer : this.$refs.delPointer;
        var vb = pointer.viewBox;
        var x = -vb[0] / vb[2] * pointer.width;
        var y = -vb[1] / vb[3] * pointer.height;
        return 'url(' + pointer.$el.toDataURL() + ') ' +
          ~~x + ' ' + ~~y + ', auto';
      },
      formatNumber: function(v, digits) {
        var neg = v < 0;
        if (neg) {
          v = -v;
        }
        for (var i = 0; i < digits; i += 1) {
          v *= 10;
        }
        var s = '' + Math.round(v);
        while (s.length <= digits) {
          s = '0' + s;
        }
        if (digits > 0) {
          s = s.substring(0, s.length - digits) +
            '.' + s.substring(s.length - digits);
        }
        return neg? '-' + s : s;
      },
      pathLine: function(x, y) {
        return 'M0 0L' + x + ' ' + y;
      },
      buttonOverlay: function(i) {
        var state = this.buttonStates[i];
        if (this.buttonMode == state.mode || state.down) {
          return true;
        } else if (state.over) {
          return true;
        }
        return false;
      },
      button_mouseHandler: function(event, i) {
        var state = this.buttonStates[i];
        if (event.type == 'mouseover') {
          state.over = true;
        } else if (event.type == 'mouseout') {
          state.over = false;
        } else if (event.type == 'mousedown') {
          state.down = true;
          var mouseupHandler = function() {
            $(document).off('mouseup', mouseupHandler);
            state.down = false;
          };
          $(document).on('mouseup', mouseupHandler);
        } else if (event.type == 'click') {
          this.buttonMode = this.buttonMode != state.mode? state.mode: '';
        }
      },
      hsv_mousedownHandler: function(event, hsvIndex, scale) {
        var targetMarker = this.colorMarkers[this.selectedIndex];
        if (!targetMarker) {
          return;
        }
        var editor = this.hsvEditor(targetMarker.i);
        var target = event.target;
        var mousemoveHandler = function(event) {
          var value = +target.value / scale;
          var hsv = targetMarker.hsv.slice();
          if (!isNaN(value) ) {
            hsv[0] = hsvIndex == 0? value : hsv[0];
            hsv[1] = hsvIndex == 1? value : hsv[1];
            hsv[2] = hsvIndex == 2? value : hsv[2];
          }
          var colors = editor.getColors(
              ColorUtil.hue2rad(hsv[0]), hsv[1], hsv[2]);
          this.$emit('input', colors);
        }.bind(this);
        var mouseupHandler = function(event) {
          $(document).off('mousemove', mousemoveHandler).
            off('mouseup', mouseupHandler);
        }.bind(this);
        $(document).on('mousemove', mousemoveHandler).
          on('mouseup', mouseupHandler);
      },
      hsv_changeHandler: function(event, hsvIndex, scale) {
        var targetMarker = this.colorMarkers[this.selectedIndex];
        if (!targetMarker) {
          return;
        }
        var editor = this.hsvEditor(targetMarker.i);
        var value = +event.target.value / scale;
        var hsv = targetMarker.hsv.slice();
        if (!isNaN(value) ) {
          hsv[0] = hsvIndex == 0? value : hsv[0];
          hsv[1] = hsvIndex == 1? value : hsv[1];
          hsv[2] = hsvIndex == 2? value : hsv[2];
        }
        var colors = editor.getColors(
            ColorUtil.hue2rad(hsv[0]), hsv[1], hsv[2]);
        this.$emit('input', colors);
      },
      picker_mouseoverHandler: function(event) {
        var $el = closest(function(elm) {
          return elm.getAttribute('x-color-marker-index') != null;
        }, event);
        if (!$el) {
          return;
        }
        event.preventDefault();
        var targetIndex = +$el.getAttribute('x-color-marker-index');
        this.overIndex = event.type == 'mouseover'? targetIndex : -1;
      },
      picker_mousedownHandler: function(event) {
        var $el = closest(function(elm) {
          return elm.getAttribute('x-color-marker-index') != null;
        }, event);
        if (this.buttonMode == 'add') {
          this.picker_mousedownHandler_add_marker(event);
        } else if (this.buttonMode == 'del') {
          if ($el) {
            this.picker_mousedownHandler_del_marker(event, $el);
          }
        } else {
          if ($el) {
            this.picker_mousedownHandler_move_marker(event, $el);
          }
        }
      },
      picker_mousedownHandler_add_marker: function(event) {
        event.preventDefault();
        var r = this.size / 2;
        var x = event.offsetX - r - this.margin;
        var y = event.offsetY - r - this.margin;
        var s = Math.sqrt(x * x + y * y) / r;
        var h = ColorUtil.rad2hue(Math.atan2(-y, x) );
        if (s > 1) {
          return;
        }
        var color = ColorUtil.rgb2hex.apply(null,
            ColorUtil.hsv2rgb(h, s, 1) );
        var colors = this.colors.slice();
        colors.push(color);
        this.buttonMode = '';
        this.selectedIndex = colors.length - 1;
        this.$emit('input', colors);
      },
      picker_mousedownHandler_del_marker: function(event, $el) {
        event.preventDefault();
        var targetIndex = +$el.getAttribute('x-color-marker-index');
        var colors = [];
        this.colors.forEach(function(color, i) {
          if (targetIndex != i) {
            colors.push(color);
          }
        }.bind(this) );
        this.buttonMode = '';
        this.selectedIndex = 0;
        this.$emit('input', colors);
      },
      picker_mousedownHandler_move_marker: function(event, $el) {

        var mousemoveHandler = function(event) {
          var deltaX = event.pageX - dragPoint.x;
          var deltaY = event.pageY - dragPoint.y;
          var x = lastPos.x + deltaX;
          var y = lastPos.y + deltaY;
          var r = this.size / 2;
          var t = Math.atan2(-y, x);
          var s = Math.sqrt(x * x + y * y) / r;
          if (s > 1) {
            s = 1;
          }
          var colors = editor.getColors(t, s, targetMarker.hsv[2]);
          this.$emit('input', colors);
        }.bind(this);

        var mouseupandler = function(event) {
          $(document).off('mousemove', mousemoveHandler).
            off('mouseup', mouseupandler);
        }.bind(this);

        event.preventDefault();
        var targetIndex = +$el.getAttribute('x-color-marker-index');
        this.setSelectedIndex(targetIndex);
        var editor = this.hsvEditor(targetIndex);
        var targetMarker = this.colorMarkers[targetIndex];
        var lastPos = { x: targetMarker.x, y: targetMarker.y };
        var dragPoint = { x: event.pageX, y: event.pageY };
        $(document).on('mousemove', mousemoveHandler).
          on('mouseup', mouseupandler);
      },
      hsvEditor : function(targetIndex) {
        var colorMarkers = this.colorMarkers.slice();
        return {
          getColors: function(t, s, v) {
            var dr = t - ColorUtil.hue2rad(colorMarkers[targetIndex].hsv[0]);
            var ds = s / colorMarkers[targetIndex].hsv[1]; // ratio
            var dv = v / colorMarkers[targetIndex].hsv[2]; // ratio
            var colors = this.colors.slice();
            colors.forEach(function(_, i) {
              if (i == targetIndex || this.linked) {
                var hsv = colorMarkers[i].hsv.slice();
                hsv[0] = ColorUtil.rad2hue(ColorUtil.hue2rad(hsv[0]) + dr);
                if (i == targetIndex) {
                  hsv[1] = s;
                  hsv[2] = v;
                } else if (this.linked && targetIndex == 0) {
                  hsv[1] = Math.min(hsv[1] * ds, 1);
                  hsv[2] = Math.min(hsv[2] * dv, 1);
                }
                colors[i] = ColorUtil.rgb2hex.apply(null,
                    ColorUtil.hsv2rgb.apply(null, hsv) );
              }
            }.bind(this) );
            return colors;
          }.bind(this)
        };
      },
      setSelectedIndex: function(i) {
        this.selectedIndex = i;
      },
      colorChooserStyle: function(c) {
        return {
          backgroundColor: c.displayColor,
          width: '16px',
          height: '16px',
          borderStyle: 'solid',
          borderWidth: '1px',
          borderColor: c.i == this.selectedIndex? 'white' : 'black',
          verticalAlign: 'top',
          display: 'inline-block'
        };
      }
    }
  };

  components['qrcode-color-editor'] = {
      template: '<div>' +
      '<div ref="svgHolder" style="display:none;">' +
        '<svg xmlns="http://www.w3.org/2000/svg"' +
          ' :width="( (pixels.length * 110) + 10) + \'px\'"' +
          ' height="120px"' +
          ' :view-box.camel="\'0 0 \' +' +
          '  ( (pixels.length * 110) + 10) + \' 120\'">' +
          '<rect :fill="bgColor"' +
          ' :width="( (pixels.length * 110) + 10)" height="120"/>' +
          '<rect :x="10 + 110 * i" y="10" width="100" height="100"' +
          ' :fill="c" v-for="(c, i) in pixels" />' +
        '</svg>' +
      '</div>' +
      '<button @click="download_clickHandler"> Download Sample </button>' +
      '<label><input type="checkbox" v-model="fakeCmyk" />Fake CMYK</label>' +
      '<br/>' +
      '<div style="margin-top:4px;">' +
        '<svg style="float:left;" width="120" height="120">' +
          '<rect width="120" height="120" :fill="displayBgColor" stroke="none" />' +
          '<g transform="translate(10, 10)">' +
            '<qrcode :size="100" :pixels="displayPixels"></qrcode>' +
          '</g>' +
        '</svg>' +
        '<div style="float:left;margin-left:4px;">' +
          '<textarea style="width:10rem;height:10rem;border:none;" :readonly="true"' +
          ' :value="JSON.stringify(pixels, null, 2)"' +
          ' title="switch to QR" @click="mode=\'qr\'" ></textarea>' +
          '<br/>' +
          '<input type="text" style="width:4rem;border:none;" :readonly="true"' +
          ' :value="bgColor" title="switch to BgColor" @click="mode=\'bg\'" />' +
        '</div>' +
        '<br style="clear:both;"/>' +
      '</div>' +
      '<div style="display: inline-block;border-radius: 6px;' +
        ' margin-top: 4px;padding: 4px;border: 1px solid #ccc;">' +
        '<color-picker ref="picker" :size="216"' +
        ' :value="mode == \'qr\'? pixels : [bgColor]"' +
        ' :fake-cmyk="fakeCmyk" @input="inputHandler"></color-picker>' +
      '</div>' +
    '</div>',
    props: {
      value: { default: {}, type: Object }
    },
    data: function() {
      return {
        mounted: false,
        mode: 'qr',
        displayPixels: [ '#000000' ],
        displayBgColor: '#ffffff',
        fakeCmyk: true
      };
    },
    watch: { validate: function() {} },
    computed: {
      pixels: function() {
        return this.value.pixels || [ '#000000' ];
      },
      bgColor: function() {
        return this.value.bgColor || '#ffffff';
      },
      validate: function() {
        if (this.mounted) {
          var picker = this.$refs.picker;
          this.displayPixels = this.pixels.map(function(color) {
            return picker.toDisplayColor(color);
          });
          this.displayBgColor =  picker.toDisplayColor(this.bgColor);
        }
        return [ this.mounted, this.value,
          this.pixels, this.bgColor, this.fakeCmyk ];
      }
    },
    methods: {
      inputHandler: function(colors) {
        if (this.mode == 'qr') {
          var pixels = colors.length > 0? colors : [ '#000000' ];
          this.$emit('input', { pixels: pixels, bgColor: this.bgColor });
        } else if (this.mode == 'bg') {
          var bgColor = colors.length > 0? colors[0] : '#ffffff';
          this.$emit('input', { pixels: this.pixels, bgColor: bgColor });
        }
      },
      download_clickHandler: function() {
        var filename = 'colors.svg';
        var content = this.$refs.svgHolder.innerHTML;
        // trim white spaces.
        content = content.replace(/^\s+|\s+$/g, '');
        var dataURL = 'data:image/svg+xml;charset=UTF-8,' +
          encodeURIComponent(content);
        var a = document.createElement('a');
        a.href = dataURL;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
    },
    mounted:function() {
      this.mounted = true;
    }
  };

  !function() {
    for (var k in components) {
      Vue.component(k, components[k]);
    }
  }();

}();
